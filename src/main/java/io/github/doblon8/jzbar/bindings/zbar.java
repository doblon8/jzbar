// Generated by jextract

package io.github.doblon8.jzbar.bindings;

import io.github.doblon8.jzbar.utils.NativeLoader;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.util.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;

public class zbar {

    zbar() {
        // Should not be called directly
    }

    static final Arena LIBRARY_ARENA = Arena.ofAuto();
    static final boolean TRACE_DOWNCALLS = Boolean.getBoolean("jextract.trace.downcalls");

    static void traceDowncall(String name, Object... args) {
         String traceArgs = Arrays.stream(args)
                       .map(Object::toString)
                       .collect(Collectors.joining(", "));
         System.out.printf("%s(%s)\n", name, traceArgs);
    }

    static MemorySegment findOrThrow(String symbol) {
        return SYMBOL_LOOKUP.find(symbol)
            .orElseThrow(() -> new UnsatisfiedLinkError("unresolved symbol: " + symbol));
    }

    static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {
        try {
            return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());
        } catch (ReflectiveOperationException ex) {
            throw new AssertionError(ex);
        }
    }

    static MemoryLayout align(MemoryLayout layout, long align) {
        return switch (layout) {
            case PaddingLayout p -> p;
            case ValueLayout v -> v.withByteAlignment(align);
            case GroupLayout g -> {
                MemoryLayout[] alignedMembers = g.memberLayouts().stream()
                        .map(m -> align(m, align)).toArray(MemoryLayout[]::new);
                yield g instanceof StructLayout ?
                        MemoryLayout.structLayout(alignedMembers) : MemoryLayout.unionLayout(alignedMembers);
            }
            case SequenceLayout s -> MemoryLayout.sequenceLayout(s.elementCount(), align(s.elementLayout(), align));
        };
    }

    static {
        NativeLoader.loadZBar();
    }

    static final SymbolLookup SYMBOL_LOOKUP = SymbolLookup.loaderLookup()
            .or(Linker.nativeLinker().defaultLookup());

    public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;
    public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;
    public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT;
    public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT;
    public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;
    public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;
    public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = ValueLayout.ADDRESS
            .withTargetLayout(MemoryLayout.sequenceLayout(java.lang.Long.MAX_VALUE, JAVA_BYTE));
    public static final ValueLayout.OfLong C_LONG = ValueLayout.JAVA_LONG;
    private static final int _STDINT_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _STDINT_H 1
     * }
     */
    public static int _STDINT_H() {
        return _STDINT_H;
    }
    private static final int _FEATURES_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _FEATURES_H 1
     * }
     */
    public static int _FEATURES_H() {
        return _FEATURES_H;
    }
    private static final int _DEFAULT_SOURCE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _DEFAULT_SOURCE 1
     * }
     */
    public static int _DEFAULT_SOURCE() {
        return _DEFAULT_SOURCE;
    }
    private static final int __GLIBC_USE_ISOC2X = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_ISOC2X 0
     * }
     */
    public static int __GLIBC_USE_ISOC2X() {
        return __GLIBC_USE_ISOC2X;
    }
    private static final int __USE_ISOC11 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_ISOC11 1
     * }
     */
    public static int __USE_ISOC11() {
        return __USE_ISOC11;
    }
    private static final int __USE_ISOC99 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_ISOC99 1
     * }
     */
    public static int __USE_ISOC99() {
        return __USE_ISOC99;
    }
    private static final int __USE_ISOC95 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_ISOC95 1
     * }
     */
    public static int __USE_ISOC95() {
        return __USE_ISOC95;
    }
    private static final int __USE_POSIX_IMPLICITLY = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_POSIX_IMPLICITLY 1
     * }
     */
    public static int __USE_POSIX_IMPLICITLY() {
        return __USE_POSIX_IMPLICITLY;
    }
    private static final int _POSIX_SOURCE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_SOURCE 1
     * }
     */
    public static int _POSIX_SOURCE() {
        return _POSIX_SOURCE;
    }
    private static final int __USE_POSIX = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_POSIX 1
     * }
     */
    public static int __USE_POSIX() {
        return __USE_POSIX;
    }
    private static final int __USE_POSIX2 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_POSIX2 1
     * }
     */
    public static int __USE_POSIX2() {
        return __USE_POSIX2;
    }
    private static final int __USE_POSIX199309 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_POSIX199309 1
     * }
     */
    public static int __USE_POSIX199309() {
        return __USE_POSIX199309;
    }
    private static final int __USE_POSIX199506 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_POSIX199506 1
     * }
     */
    public static int __USE_POSIX199506() {
        return __USE_POSIX199506;
    }
    private static final int __USE_XOPEN2K = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_XOPEN2K 1
     * }
     */
    public static int __USE_XOPEN2K() {
        return __USE_XOPEN2K;
    }
    private static final int __USE_XOPEN2K8 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_XOPEN2K8 1
     * }
     */
    public static int __USE_XOPEN2K8() {
        return __USE_XOPEN2K8;
    }
    private static final int _ATFILE_SOURCE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _ATFILE_SOURCE 1
     * }
     */
    public static int _ATFILE_SOURCE() {
        return _ATFILE_SOURCE;
    }
    private static final int __WORDSIZE = (int)64L;
    /**
     * {@snippet lang=c :
     * #define __WORDSIZE 64
     * }
     */
    public static int __WORDSIZE() {
        return __WORDSIZE;
    }
    private static final int __WORDSIZE_TIME64_COMPAT32 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __WORDSIZE_TIME64_COMPAT32 1
     * }
     */
    public static int __WORDSIZE_TIME64_COMPAT32() {
        return __WORDSIZE_TIME64_COMPAT32;
    }
    private static final int __SYSCALL_WORDSIZE = (int)64L;
    /**
     * {@snippet lang=c :
     * #define __SYSCALL_WORDSIZE 64
     * }
     */
    public static int __SYSCALL_WORDSIZE() {
        return __SYSCALL_WORDSIZE;
    }
    private static final int __USE_MISC = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_MISC 1
     * }
     */
    public static int __USE_MISC() {
        return __USE_MISC;
    }
    private static final int __USE_ATFILE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_ATFILE 1
     * }
     */
    public static int __USE_ATFILE() {
        return __USE_ATFILE;
    }
    private static final int __USE_FORTIFY_LEVEL = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __USE_FORTIFY_LEVEL 0
     * }
     */
    public static int __USE_FORTIFY_LEVEL() {
        return __USE_FORTIFY_LEVEL;
    }
    private static final int __GLIBC_USE_DEPRECATED_GETS = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_DEPRECATED_GETS 0
     * }
     */
    public static int __GLIBC_USE_DEPRECATED_GETS() {
        return __GLIBC_USE_DEPRECATED_GETS;
    }
    private static final int __GLIBC_USE_DEPRECATED_SCANF = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_DEPRECATED_SCANF 0
     * }
     */
    public static int __GLIBC_USE_DEPRECATED_SCANF() {
        return __GLIBC_USE_DEPRECATED_SCANF;
    }
    private static final int _STDC_PREDEF_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _STDC_PREDEF_H 1
     * }
     */
    public static int _STDC_PREDEF_H() {
        return _STDC_PREDEF_H;
    }
    private static final int __STDC_IEC_559__ = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __STDC_IEC_559__ 1
     * }
     */
    public static int __STDC_IEC_559__() {
        return __STDC_IEC_559__;
    }
    private static final int __STDC_IEC_559_COMPLEX__ = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __STDC_IEC_559_COMPLEX__ 1
     * }
     */
    public static int __STDC_IEC_559_COMPLEX__() {
        return __STDC_IEC_559_COMPLEX__;
    }
    private static final int __GNU_LIBRARY__ = (int)6L;
    /**
     * {@snippet lang=c :
     * #define __GNU_LIBRARY__ 6
     * }
     */
    public static int __GNU_LIBRARY__() {
        return __GNU_LIBRARY__;
    }
    private static final int __GLIBC__ = (int)2L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC__ 2
     * }
     */
    public static int __GLIBC__() {
        return __GLIBC__;
    }
    private static final int __GLIBC_MINOR__ = (int)36L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_MINOR__ 36
     * }
     */
    public static int __GLIBC_MINOR__() {
        return __GLIBC_MINOR__;
    }
    private static final int _SYS_CDEFS_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _SYS_CDEFS_H 1
     * }
     */
    public static int _SYS_CDEFS_H() {
        return _SYS_CDEFS_H;
    }
    private static final int __glibc_c99_flexarr_available = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __glibc_c99_flexarr_available 1
     * }
     */
    public static int __glibc_c99_flexarr_available() {
        return __glibc_c99_flexarr_available;
    }
    private static final int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI 0
     * }
     */
    public static int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI() {
        return __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI;
    }
    private static final int __HAVE_GENERIC_SELECTION = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_GENERIC_SELECTION 1
     * }
     */
    public static int __HAVE_GENERIC_SELECTION() {
        return __HAVE_GENERIC_SELECTION;
    }
    private static final int __GLIBC_USE_LIB_EXT2 = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_LIB_EXT2 0
     * }
     */
    public static int __GLIBC_USE_LIB_EXT2() {
        return __GLIBC_USE_LIB_EXT2;
    }
    private static final int __GLIBC_USE_IEC_60559_BFP_EXT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_IEC_60559_BFP_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_BFP_EXT() {
        return __GLIBC_USE_IEC_60559_BFP_EXT;
    }
    private static final int __GLIBC_USE_IEC_60559_BFP_EXT_C2X = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_IEC_60559_BFP_EXT_C2X 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_BFP_EXT_C2X() {
        return __GLIBC_USE_IEC_60559_BFP_EXT_C2X;
    }
    private static final int __GLIBC_USE_IEC_60559_EXT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_IEC_60559_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_EXT() {
        return __GLIBC_USE_IEC_60559_EXT;
    }
    private static final int __GLIBC_USE_IEC_60559_FUNCS_EXT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_IEC_60559_FUNCS_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_FUNCS_EXT() {
        return __GLIBC_USE_IEC_60559_FUNCS_EXT;
    }
    private static final int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X() {
        return __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X;
    }
    private static final int __GLIBC_USE_IEC_60559_TYPES_EXT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_IEC_60559_TYPES_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_TYPES_EXT() {
        return __GLIBC_USE_IEC_60559_TYPES_EXT;
    }
    private static final int _BITS_TYPES_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_TYPES_H 1
     * }
     */
    public static int _BITS_TYPES_H() {
        return _BITS_TYPES_H;
    }
    private static final int _BITS_TYPESIZES_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_TYPESIZES_H 1
     * }
     */
    public static int _BITS_TYPESIZES_H() {
        return _BITS_TYPESIZES_H;
    }
    private static final int __OFF_T_MATCHES_OFF64_T = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __OFF_T_MATCHES_OFF64_T 1
     * }
     */
    public static int __OFF_T_MATCHES_OFF64_T() {
        return __OFF_T_MATCHES_OFF64_T;
    }
    private static final int __INO_T_MATCHES_INO64_T = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __INO_T_MATCHES_INO64_T 1
     * }
     */
    public static int __INO_T_MATCHES_INO64_T() {
        return __INO_T_MATCHES_INO64_T;
    }
    private static final int __RLIM_T_MATCHES_RLIM64_T = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __RLIM_T_MATCHES_RLIM64_T 1
     * }
     */
    public static int __RLIM_T_MATCHES_RLIM64_T() {
        return __RLIM_T_MATCHES_RLIM64_T;
    }
    private static final int __STATFS_MATCHES_STATFS64 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __STATFS_MATCHES_STATFS64 1
     * }
     */
    public static int __STATFS_MATCHES_STATFS64() {
        return __STATFS_MATCHES_STATFS64;
    }
    private static final int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 1
     * }
     */
    public static int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64() {
        return __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64;
    }
    private static final int __FD_SETSIZE = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define __FD_SETSIZE 1024
     * }
     */
    public static int __FD_SETSIZE() {
        return __FD_SETSIZE;
    }
    private static final int _BITS_TIME64_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_TIME64_H 1
     * }
     */
    public static int _BITS_TIME64_H() {
        return _BITS_TIME64_H;
    }
    private static final int _BITS_WCHAR_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_WCHAR_H 1
     * }
     */
    public static int _BITS_WCHAR_H() {
        return _BITS_WCHAR_H;
    }
    private static final int _BITS_STDINT_INTN_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_STDINT_INTN_H 1
     * }
     */
    public static int _BITS_STDINT_INTN_H() {
        return _BITS_STDINT_INTN_H;
    }
    private static final int _BITS_STDINT_UINTN_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_STDINT_UINTN_H 1
     * }
     */
    public static int _BITS_STDINT_UINTN_H() {
        return _BITS_STDINT_UINTN_H;
    }
    /**
     * {@snippet lang=c :
     * typedef unsigned char __u_char
     * }
     */
    public static final OfByte __u_char = zbar.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned short __u_short
     * }
     */
    public static final OfShort __u_short = zbar.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __u_int
     * }
     */
    public static final OfInt __u_int = zbar.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __u_long
     * }
     */
    public static final OfLong __u_long = zbar.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef signed char __int8_t
     * }
     */
    public static final OfByte __int8_t = zbar.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned char __uint8_t
     * }
     */
    public static final OfByte __uint8_t = zbar.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef short __int16_t
     * }
     */
    public static final OfShort __int16_t = zbar.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned short __uint16_t
     * }
     */
    public static final OfShort __uint16_t = zbar.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef int __int32_t
     * }
     */
    public static final OfInt __int32_t = zbar.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __uint32_t
     * }
     */
    public static final OfInt __uint32_t = zbar.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __int64_t
     * }
     */
    public static final OfLong __int64_t = zbar.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __uint64_t
     * }
     */
    public static final OfLong __uint64_t = zbar.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __int8_t __int_least8_t
     * }
     */
    public static final OfByte __int_least8_t = zbar.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __uint8_t __uint_least8_t
     * }
     */
    public static final OfByte __uint_least8_t = zbar.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __int16_t __int_least16_t
     * }
     */
    public static final OfShort __int_least16_t = zbar.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __uint16_t __uint_least16_t
     * }
     */
    public static final OfShort __uint_least16_t = zbar.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __int32_t __int_least32_t
     * }
     */
    public static final OfInt __int_least32_t = zbar.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __uint_least32_t
     * }
     */
    public static final OfInt __uint_least32_t = zbar.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int64_t __int_least64_t
     * }
     */
    public static final OfLong __int_least64_t = zbar.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __uint64_t __uint_least64_t
     * }
     */
    public static final OfLong __uint_least64_t = zbar.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __quad_t
     * }
     */
    public static final OfLong __quad_t = zbar.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __u_quad_t
     * }
     */
    public static final OfLong __u_quad_t = zbar.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __intmax_t
     * }
     */
    public static final OfLong __intmax_t = zbar.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __uintmax_t
     * }
     */
    public static final OfLong __uintmax_t = zbar.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __dev_t
     * }
     */
    public static final OfLong __dev_t = zbar.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __uid_t
     * }
     */
    public static final OfInt __uid_t = zbar.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __gid_t
     * }
     */
    public static final OfInt __gid_t = zbar.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __ino_t
     * }
     */
    public static final OfLong __ino_t = zbar.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __ino64_t
     * }
     */
    public static final OfLong __ino64_t = zbar.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __mode_t
     * }
     */
    public static final OfInt __mode_t = zbar.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __nlink_t
     * }
     */
    public static final OfLong __nlink_t = zbar.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __off_t
     * }
     */
    public static final OfLong __off_t = zbar.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __off64_t
     * }
     */
    public static final OfLong __off64_t = zbar.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef int __pid_t
     * }
     */
    public static final OfInt __pid_t = zbar.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __clock_t
     * }
     */
    public static final OfLong __clock_t = zbar.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __rlim_t
     * }
     */
    public static final OfLong __rlim_t = zbar.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __rlim64_t
     * }
     */
    public static final OfLong __rlim64_t = zbar.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __id_t
     * }
     */
    public static final OfInt __id_t = zbar.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __time_t
     * }
     */
    public static final OfLong __time_t = zbar.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __useconds_t
     * }
     */
    public static final OfInt __useconds_t = zbar.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __suseconds_t
     * }
     */
    public static final OfLong __suseconds_t = zbar.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __suseconds64_t
     * }
     */
    public static final OfLong __suseconds64_t = zbar.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef int __daddr_t
     * }
     */
    public static final OfInt __daddr_t = zbar.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __key_t
     * }
     */
    public static final OfInt __key_t = zbar.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __clockid_t
     * }
     */
    public static final OfInt __clockid_t = zbar.C_INT;
    /**
     * {@snippet lang=c :
     * typedef void *__timer_t
     * }
     */
    public static final AddressLayout __timer_t = zbar.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef long __blksize_t
     * }
     */
    public static final OfLong __blksize_t = zbar.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __blkcnt_t
     * }
     */
    public static final OfLong __blkcnt_t = zbar.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __blkcnt64_t
     * }
     */
    public static final OfLong __blkcnt64_t = zbar.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __fsblkcnt_t
     * }
     */
    public static final OfLong __fsblkcnt_t = zbar.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __fsblkcnt64_t
     * }
     */
    public static final OfLong __fsblkcnt64_t = zbar.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __fsfilcnt_t
     * }
     */
    public static final OfLong __fsfilcnt_t = zbar.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __fsfilcnt64_t
     * }
     */
    public static final OfLong __fsfilcnt64_t = zbar.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __fsword_t
     * }
     */
    public static final OfLong __fsword_t = zbar.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __ssize_t
     * }
     */
    public static final OfLong __ssize_t = zbar.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __syscall_slong_t
     * }
     */
    public static final OfLong __syscall_slong_t = zbar.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __syscall_ulong_t
     * }
     */
    public static final OfLong __syscall_ulong_t = zbar.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __off64_t __loff_t
     * }
     */
    public static final OfLong __loff_t = zbar.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef char *__caddr_t
     * }
     */
    public static final AddressLayout __caddr_t = zbar.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef long __intptr_t
     * }
     */
    public static final OfLong __intptr_t = zbar.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __socklen_t
     * }
     */
    public static final OfInt __socklen_t = zbar.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __sig_atomic_t
     * }
     */
    public static final OfInt __sig_atomic_t = zbar.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int8_t int8_t
     * }
     */
    public static final OfByte int8_t = zbar.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __int16_t int16_t
     * }
     */
    public static final OfShort int16_t = zbar.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __int32_t int32_t
     * }
     */
    public static final OfInt int32_t = zbar.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int64_t int64_t
     * }
     */
    public static final OfLong int64_t = zbar.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __uint8_t uint8_t
     * }
     */
    public static final OfByte uint8_t = zbar.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __uint16_t uint16_t
     * }
     */
    public static final OfShort uint16_t = zbar.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t uint32_t
     * }
     */
    public static final OfInt uint32_t = zbar.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint64_t uint64_t
     * }
     */
    public static final OfLong uint64_t = zbar.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __int_least8_t int_least8_t
     * }
     */
    public static final OfByte int_least8_t = zbar.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __int_least16_t int_least16_t
     * }
     */
    public static final OfShort int_least16_t = zbar.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __int_least32_t int_least32_t
     * }
     */
    public static final OfInt int_least32_t = zbar.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int_least64_t int_least64_t
     * }
     */
    public static final OfLong int_least64_t = zbar.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __uint_least8_t uint_least8_t
     * }
     */
    public static final OfByte uint_least8_t = zbar.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __uint_least16_t uint_least16_t
     * }
     */
    public static final OfShort uint_least16_t = zbar.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __uint_least32_t uint_least32_t
     * }
     */
    public static final OfInt uint_least32_t = zbar.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint_least64_t uint_least64_t
     * }
     */
    public static final OfLong uint_least64_t = zbar.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef signed char int_fast8_t
     * }
     */
    public static final OfByte int_fast8_t = zbar.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef long int_fast16_t
     * }
     */
    public static final OfLong int_fast16_t = zbar.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long int_fast32_t
     * }
     */
    public static final OfLong int_fast32_t = zbar.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long int_fast64_t
     * }
     */
    public static final OfLong int_fast64_t = zbar.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned char uint_fast8_t
     * }
     */
    public static final OfByte uint_fast8_t = zbar.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned long uint_fast16_t
     * }
     */
    public static final OfLong uint_fast16_t = zbar.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long uint_fast32_t
     * }
     */
    public static final OfLong uint_fast32_t = zbar.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long uint_fast64_t
     * }
     */
    public static final OfLong uint_fast64_t = zbar.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long intptr_t
     * }
     */
    public static final OfLong intptr_t = zbar.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long uintptr_t
     * }
     */
    public static final OfLong uintptr_t = zbar.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __intmax_t intmax_t
     * }
     */
    public static final OfLong intmax_t = zbar.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __uintmax_t uintmax_t
     * }
     */
    public static final OfLong uintmax_t = zbar.C_LONG;
    private static final int ZBAR_SPACE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum zbar_color_e.ZBAR_SPACE = 0
     * }
     */
    public static int ZBAR_SPACE() {
        return ZBAR_SPACE;
    }
    private static final int ZBAR_BAR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum zbar_color_e.ZBAR_BAR = 1
     * }
     */
    public static int ZBAR_BAR() {
        return ZBAR_BAR;
    }
    private static final int ZBAR_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum zbar_symbol_type_e.ZBAR_NONE = 0
     * }
     */
    public static int ZBAR_NONE() {
        return ZBAR_NONE;
    }
    private static final int ZBAR_PARTIAL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum zbar_symbol_type_e.ZBAR_PARTIAL = 1
     * }
     */
    public static int ZBAR_PARTIAL() {
        return ZBAR_PARTIAL;
    }
    private static final int ZBAR_EAN2 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum zbar_symbol_type_e.ZBAR_EAN2 = 2
     * }
     */
    public static int ZBAR_EAN2() {
        return ZBAR_EAN2;
    }
    private static final int ZBAR_EAN5 = (int)5L;
    /**
     * {@snippet lang=c :
     * enum zbar_symbol_type_e.ZBAR_EAN5 = 5
     * }
     */
    public static int ZBAR_EAN5() {
        return ZBAR_EAN5;
    }
    private static final int ZBAR_EAN8 = (int)8L;
    /**
     * {@snippet lang=c :
     * enum zbar_symbol_type_e.ZBAR_EAN8 = 8
     * }
     */
    public static int ZBAR_EAN8() {
        return ZBAR_EAN8;
    }
    private static final int ZBAR_UPCE = (int)9L;
    /**
     * {@snippet lang=c :
     * enum zbar_symbol_type_e.ZBAR_UPCE = 9
     * }
     */
    public static int ZBAR_UPCE() {
        return ZBAR_UPCE;
    }
    private static final int ZBAR_ISBN10 = (int)10L;
    /**
     * {@snippet lang=c :
     * enum zbar_symbol_type_e.ZBAR_ISBN10 = 10
     * }
     */
    public static int ZBAR_ISBN10() {
        return ZBAR_ISBN10;
    }
    private static final int ZBAR_UPCA = (int)12L;
    /**
     * {@snippet lang=c :
     * enum zbar_symbol_type_e.ZBAR_UPCA = 12
     * }
     */
    public static int ZBAR_UPCA() {
        return ZBAR_UPCA;
    }
    private static final int ZBAR_EAN13 = (int)13L;
    /**
     * {@snippet lang=c :
     * enum zbar_symbol_type_e.ZBAR_EAN13 = 13
     * }
     */
    public static int ZBAR_EAN13() {
        return ZBAR_EAN13;
    }
    private static final int ZBAR_ISBN13 = (int)14L;
    /**
     * {@snippet lang=c :
     * enum zbar_symbol_type_e.ZBAR_ISBN13 = 14
     * }
     */
    public static int ZBAR_ISBN13() {
        return ZBAR_ISBN13;
    }
    private static final int ZBAR_COMPOSITE = (int)15L;
    /**
     * {@snippet lang=c :
     * enum zbar_symbol_type_e.ZBAR_COMPOSITE = 15
     * }
     */
    public static int ZBAR_COMPOSITE() {
        return ZBAR_COMPOSITE;
    }
    private static final int ZBAR_I25 = (int)25L;
    /**
     * {@snippet lang=c :
     * enum zbar_symbol_type_e.ZBAR_I25 = 25
     * }
     */
    public static int ZBAR_I25() {
        return ZBAR_I25;
    }
    private static final int ZBAR_DATABAR = (int)34L;
    /**
     * {@snippet lang=c :
     * enum zbar_symbol_type_e.ZBAR_DATABAR = 34
     * }
     */
    public static int ZBAR_DATABAR() {
        return ZBAR_DATABAR;
    }
    private static final int ZBAR_DATABAR_EXP = (int)35L;
    /**
     * {@snippet lang=c :
     * enum zbar_symbol_type_e.ZBAR_DATABAR_EXP = 35
     * }
     */
    public static int ZBAR_DATABAR_EXP() {
        return ZBAR_DATABAR_EXP;
    }
    private static final int ZBAR_CODABAR = (int)38L;
    /**
     * {@snippet lang=c :
     * enum zbar_symbol_type_e.ZBAR_CODABAR = 38
     * }
     */
    public static int ZBAR_CODABAR() {
        return ZBAR_CODABAR;
    }
    private static final int ZBAR_CODE39 = (int)39L;
    /**
     * {@snippet lang=c :
     * enum zbar_symbol_type_e.ZBAR_CODE39 = 39
     * }
     */
    public static int ZBAR_CODE39() {
        return ZBAR_CODE39;
    }
    private static final int ZBAR_PDF417 = (int)57L;
    /**
     * {@snippet lang=c :
     * enum zbar_symbol_type_e.ZBAR_PDF417 = 57
     * }
     */
    public static int ZBAR_PDF417() {
        return ZBAR_PDF417;
    }
    private static final int ZBAR_QRCODE = (int)64L;
    /**
     * {@snippet lang=c :
     * enum zbar_symbol_type_e.ZBAR_QRCODE = 64
     * }
     */
    public static int ZBAR_QRCODE() {
        return ZBAR_QRCODE;
    }
    private static final int ZBAR_SQCODE = (int)80L;
    /**
     * {@snippet lang=c :
     * enum zbar_symbol_type_e.ZBAR_SQCODE = 80
     * }
     */
    public static int ZBAR_SQCODE() {
        return ZBAR_SQCODE;
    }
    private static final int ZBAR_CODE93 = (int)93L;
    /**
     * {@snippet lang=c :
     * enum zbar_symbol_type_e.ZBAR_CODE93 = 93
     * }
     */
    public static int ZBAR_CODE93() {
        return ZBAR_CODE93;
    }
    private static final int ZBAR_CODE128 = (int)128L;
    /**
     * {@snippet lang=c :
     * enum zbar_symbol_type_e.ZBAR_CODE128 = 128
     * }
     */
    public static int ZBAR_CODE128() {
        return ZBAR_CODE128;
    }
    private static final int ZBAR_SYMBOL = (int)255L;
    /**
     * {@snippet lang=c :
     * enum zbar_symbol_type_e.ZBAR_SYMBOL = 255
     * }
     */
    public static int ZBAR_SYMBOL() {
        return ZBAR_SYMBOL;
    }
    private static final int ZBAR_ADDON2 = (int)512L;
    /**
     * {@snippet lang=c :
     * enum zbar_symbol_type_e.ZBAR_ADDON2 = 512
     * }
     */
    public static int ZBAR_ADDON2() {
        return ZBAR_ADDON2;
    }
    private static final int ZBAR_ADDON5 = (int)1280L;
    /**
     * {@snippet lang=c :
     * enum zbar_symbol_type_e.ZBAR_ADDON5 = 1280
     * }
     */
    public static int ZBAR_ADDON5() {
        return ZBAR_ADDON5;
    }
    private static final int ZBAR_ADDON = (int)1792L;
    /**
     * {@snippet lang=c :
     * enum zbar_symbol_type_e.ZBAR_ADDON = 1792
     * }
     */
    public static int ZBAR_ADDON() {
        return ZBAR_ADDON;
    }
    private static final int ZBAR_ORIENT_UNKNOWN = (int)-1L;
    /**
     * {@snippet lang=c :
     * enum zbar_orientation_e.ZBAR_ORIENT_UNKNOWN = -1
     * }
     */
    public static int ZBAR_ORIENT_UNKNOWN() {
        return ZBAR_ORIENT_UNKNOWN;
    }
    private static final int ZBAR_ORIENT_UP = (int)0L;
    /**
     * {@snippet lang=c :
     * enum zbar_orientation_e.ZBAR_ORIENT_UP = 0
     * }
     */
    public static int ZBAR_ORIENT_UP() {
        return ZBAR_ORIENT_UP;
    }
    private static final int ZBAR_ORIENT_RIGHT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum zbar_orientation_e.ZBAR_ORIENT_RIGHT = 1
     * }
     */
    public static int ZBAR_ORIENT_RIGHT() {
        return ZBAR_ORIENT_RIGHT;
    }
    private static final int ZBAR_ORIENT_DOWN = (int)2L;
    /**
     * {@snippet lang=c :
     * enum zbar_orientation_e.ZBAR_ORIENT_DOWN = 2
     * }
     */
    public static int ZBAR_ORIENT_DOWN() {
        return ZBAR_ORIENT_DOWN;
    }
    private static final int ZBAR_ORIENT_LEFT = (int)3L;
    /**
     * {@snippet lang=c :
     * enum zbar_orientation_e.ZBAR_ORIENT_LEFT = 3
     * }
     */
    public static int ZBAR_ORIENT_LEFT() {
        return ZBAR_ORIENT_LEFT;
    }
    private static final int ZBAR_OK = (int)0L;
    /**
     * {@snippet lang=c :
     * enum zbar_error_e.ZBAR_OK = 0
     * }
     */
    public static int ZBAR_OK() {
        return ZBAR_OK;
    }
    private static final int ZBAR_ERR_NOMEM = (int)1L;
    /**
     * {@snippet lang=c :
     * enum zbar_error_e.ZBAR_ERR_NOMEM = 1
     * }
     */
    public static int ZBAR_ERR_NOMEM() {
        return ZBAR_ERR_NOMEM;
    }
    private static final int ZBAR_ERR_INTERNAL = (int)2L;
    /**
     * {@snippet lang=c :
     * enum zbar_error_e.ZBAR_ERR_INTERNAL = 2
     * }
     */
    public static int ZBAR_ERR_INTERNAL() {
        return ZBAR_ERR_INTERNAL;
    }
    private static final int ZBAR_ERR_UNSUPPORTED = (int)3L;
    /**
     * {@snippet lang=c :
     * enum zbar_error_e.ZBAR_ERR_UNSUPPORTED = 3
     * }
     */
    public static int ZBAR_ERR_UNSUPPORTED() {
        return ZBAR_ERR_UNSUPPORTED;
    }
    private static final int ZBAR_ERR_INVALID = (int)4L;
    /**
     * {@snippet lang=c :
     * enum zbar_error_e.ZBAR_ERR_INVALID = 4
     * }
     */
    public static int ZBAR_ERR_INVALID() {
        return ZBAR_ERR_INVALID;
    }
    private static final int ZBAR_ERR_SYSTEM = (int)5L;
    /**
     * {@snippet lang=c :
     * enum zbar_error_e.ZBAR_ERR_SYSTEM = 5
     * }
     */
    public static int ZBAR_ERR_SYSTEM() {
        return ZBAR_ERR_SYSTEM;
    }
    private static final int ZBAR_ERR_LOCKING = (int)6L;
    /**
     * {@snippet lang=c :
     * enum zbar_error_e.ZBAR_ERR_LOCKING = 6
     * }
     */
    public static int ZBAR_ERR_LOCKING() {
        return ZBAR_ERR_LOCKING;
    }
    private static final int ZBAR_ERR_BUSY = (int)7L;
    /**
     * {@snippet lang=c :
     * enum zbar_error_e.ZBAR_ERR_BUSY = 7
     * }
     */
    public static int ZBAR_ERR_BUSY() {
        return ZBAR_ERR_BUSY;
    }
    private static final int ZBAR_ERR_XDISPLAY = (int)8L;
    /**
     * {@snippet lang=c :
     * enum zbar_error_e.ZBAR_ERR_XDISPLAY = 8
     * }
     */
    public static int ZBAR_ERR_XDISPLAY() {
        return ZBAR_ERR_XDISPLAY;
    }
    private static final int ZBAR_ERR_XPROTO = (int)9L;
    /**
     * {@snippet lang=c :
     * enum zbar_error_e.ZBAR_ERR_XPROTO = 9
     * }
     */
    public static int ZBAR_ERR_XPROTO() {
        return ZBAR_ERR_XPROTO;
    }
    private static final int ZBAR_ERR_CLOSED = (int)10L;
    /**
     * {@snippet lang=c :
     * enum zbar_error_e.ZBAR_ERR_CLOSED = 10
     * }
     */
    public static int ZBAR_ERR_CLOSED() {
        return ZBAR_ERR_CLOSED;
    }
    private static final int ZBAR_ERR_WINAPI = (int)11L;
    /**
     * {@snippet lang=c :
     * enum zbar_error_e.ZBAR_ERR_WINAPI = 11
     * }
     */
    public static int ZBAR_ERR_WINAPI() {
        return ZBAR_ERR_WINAPI;
    }
    private static final int ZBAR_ERR_NUM = (int)12L;
    /**
     * {@snippet lang=c :
     * enum zbar_error_e.ZBAR_ERR_NUM = 12
     * }
     */
    public static int ZBAR_ERR_NUM() {
        return ZBAR_ERR_NUM;
    }
    private static final int ZBAR_CFG_ENABLE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum zbar_config_e.ZBAR_CFG_ENABLE = 0
     * }
     */
    public static int ZBAR_CFG_ENABLE() {
        return ZBAR_CFG_ENABLE;
    }
    private static final int ZBAR_CFG_ADD_CHECK = (int)1L;
    /**
     * {@snippet lang=c :
     * enum zbar_config_e.ZBAR_CFG_ADD_CHECK = 1
     * }
     */
    public static int ZBAR_CFG_ADD_CHECK() {
        return ZBAR_CFG_ADD_CHECK;
    }
    private static final int ZBAR_CFG_EMIT_CHECK = (int)2L;
    /**
     * {@snippet lang=c :
     * enum zbar_config_e.ZBAR_CFG_EMIT_CHECK = 2
     * }
     */
    public static int ZBAR_CFG_EMIT_CHECK() {
        return ZBAR_CFG_EMIT_CHECK;
    }
    private static final int ZBAR_CFG_ASCII = (int)3L;
    /**
     * {@snippet lang=c :
     * enum zbar_config_e.ZBAR_CFG_ASCII = 3
     * }
     */
    public static int ZBAR_CFG_ASCII() {
        return ZBAR_CFG_ASCII;
    }
    private static final int ZBAR_CFG_BINARY = (int)4L;
    /**
     * {@snippet lang=c :
     * enum zbar_config_e.ZBAR_CFG_BINARY = 4
     * }
     */
    public static int ZBAR_CFG_BINARY() {
        return ZBAR_CFG_BINARY;
    }
    private static final int ZBAR_CFG_NUM = (int)5L;
    /**
     * {@snippet lang=c :
     * enum zbar_config_e.ZBAR_CFG_NUM = 5
     * }
     */
    public static int ZBAR_CFG_NUM() {
        return ZBAR_CFG_NUM;
    }
    private static final int ZBAR_CFG_MIN_LEN = (int)32L;
    /**
     * {@snippet lang=c :
     * enum zbar_config_e.ZBAR_CFG_MIN_LEN = 32
     * }
     */
    public static int ZBAR_CFG_MIN_LEN() {
        return ZBAR_CFG_MIN_LEN;
    }
    private static final int ZBAR_CFG_MAX_LEN = (int)33L;
    /**
     * {@snippet lang=c :
     * enum zbar_config_e.ZBAR_CFG_MAX_LEN = 33
     * }
     */
    public static int ZBAR_CFG_MAX_LEN() {
        return ZBAR_CFG_MAX_LEN;
    }
    private static final int ZBAR_CFG_UNCERTAINTY = (int)64L;
    /**
     * {@snippet lang=c :
     * enum zbar_config_e.ZBAR_CFG_UNCERTAINTY = 64
     * }
     */
    public static int ZBAR_CFG_UNCERTAINTY() {
        return ZBAR_CFG_UNCERTAINTY;
    }
    private static final int ZBAR_CFG_POSITION = (int)128L;
    /**
     * {@snippet lang=c :
     * enum zbar_config_e.ZBAR_CFG_POSITION = 128
     * }
     */
    public static int ZBAR_CFG_POSITION() {
        return ZBAR_CFG_POSITION;
    }
    private static final int ZBAR_CFG_TEST_INVERTED = (int)129L;
    /**
     * {@snippet lang=c :
     * enum zbar_config_e.ZBAR_CFG_TEST_INVERTED = 129
     * }
     */
    public static int ZBAR_CFG_TEST_INVERTED() {
        return ZBAR_CFG_TEST_INVERTED;
    }
    private static final int ZBAR_CFG_X_DENSITY = (int)256L;
    /**
     * {@snippet lang=c :
     * enum zbar_config_e.ZBAR_CFG_X_DENSITY = 256
     * }
     */
    public static int ZBAR_CFG_X_DENSITY() {
        return ZBAR_CFG_X_DENSITY;
    }
    private static final int ZBAR_CFG_Y_DENSITY = (int)257L;
    /**
     * {@snippet lang=c :
     * enum zbar_config_e.ZBAR_CFG_Y_DENSITY = 257
     * }
     */
    public static int ZBAR_CFG_Y_DENSITY() {
        return ZBAR_CFG_Y_DENSITY;
    }
    private static final int ZBAR_MOD_GS1 = (int)0L;
    /**
     * {@snippet lang=c :
     * enum zbar_modifier_e.ZBAR_MOD_GS1 = 0
     * }
     */
    public static int ZBAR_MOD_GS1() {
        return ZBAR_MOD_GS1;
    }
    private static final int ZBAR_MOD_AIM = (int)1L;
    /**
     * {@snippet lang=c :
     * enum zbar_modifier_e.ZBAR_MOD_AIM = 1
     * }
     */
    public static int ZBAR_MOD_AIM() {
        return ZBAR_MOD_AIM;
    }
    private static final int ZBAR_MOD_NUM = (int)2L;
    /**
     * {@snippet lang=c :
     * enum zbar_modifier_e.ZBAR_MOD_NUM = 2
     * }
     */
    public static int ZBAR_MOD_NUM() {
        return ZBAR_MOD_NUM;
    }
    private static final int VIDEO_CNTL_INTEGER = (int)1L;
    /**
     * {@snippet lang=c :
     * enum video_control_type_e.VIDEO_CNTL_INTEGER = 1
     * }
     */
    public static int VIDEO_CNTL_INTEGER() {
        return VIDEO_CNTL_INTEGER;
    }
    private static final int VIDEO_CNTL_MENU = (int)2L;
    /**
     * {@snippet lang=c :
     * enum video_control_type_e.VIDEO_CNTL_MENU = 2
     * }
     */
    public static int VIDEO_CNTL_MENU() {
        return VIDEO_CNTL_MENU;
    }
    private static final int VIDEO_CNTL_BUTTON = (int)3L;
    /**
     * {@snippet lang=c :
     * enum video_control_type_e.VIDEO_CNTL_BUTTON = 3
     * }
     */
    public static int VIDEO_CNTL_BUTTON() {
        return VIDEO_CNTL_BUTTON;
    }
    private static final int VIDEO_CNTL_INTEGER64 = (int)4L;
    /**
     * {@snippet lang=c :
     * enum video_control_type_e.VIDEO_CNTL_INTEGER64 = 4
     * }
     */
    public static int VIDEO_CNTL_INTEGER64() {
        return VIDEO_CNTL_INTEGER64;
    }
    private static final int VIDEO_CNTL_STRING = (int)5L;
    /**
     * {@snippet lang=c :
     * enum video_control_type_e.VIDEO_CNTL_STRING = 5
     * }
     */
    public static int VIDEO_CNTL_STRING() {
        return VIDEO_CNTL_STRING;
    }
    private static final int VIDEO_CNTL_BOOLEAN = (int)6L;
    /**
     * {@snippet lang=c :
     * enum video_control_type_e.VIDEO_CNTL_BOOLEAN = 6
     * }
     */
    public static int VIDEO_CNTL_BOOLEAN() {
        return VIDEO_CNTL_BOOLEAN;
    }

    private static class zbar_version {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_INT,
            zbar.C_POINTER,
            zbar.C_POINTER,
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_version");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int zbar_version(unsigned int *major, unsigned int *minor, unsigned int *patch)
     * }
     */
    public static FunctionDescriptor zbar_version$descriptor() {
        return zbar_version.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int zbar_version(unsigned int *major, unsigned int *minor, unsigned int *patch)
     * }
     */
    public static MethodHandle zbar_version$handle() {
        return zbar_version.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int zbar_version(unsigned int *major, unsigned int *minor, unsigned int *patch)
     * }
     */
    public static MemorySegment zbar_version$address() {
        return zbar_version.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int zbar_version(unsigned int *major, unsigned int *minor, unsigned int *patch)
     * }
     */
    public static int zbar_version(MemorySegment major, MemorySegment minor, MemorySegment patch) {
        var mh$ = zbar_version.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_version", major, minor, patch);
            }
            return (int)mh$.invokeExact(major, minor, patch);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_set_verbosity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            zbar.C_INT
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_set_verbosity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void zbar_set_verbosity(int verbosity)
     * }
     */
    public static FunctionDescriptor zbar_set_verbosity$descriptor() {
        return zbar_set_verbosity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void zbar_set_verbosity(int verbosity)
     * }
     */
    public static MethodHandle zbar_set_verbosity$handle() {
        return zbar_set_verbosity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void zbar_set_verbosity(int verbosity)
     * }
     */
    public static MemorySegment zbar_set_verbosity$address() {
        return zbar_set_verbosity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void zbar_set_verbosity(int verbosity)
     * }
     */
    public static void zbar_set_verbosity(int verbosity) {
        var mh$ = zbar_set_verbosity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_set_verbosity", verbosity);
            }
            mh$.invokeExact(verbosity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_increase_verbosity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_increase_verbosity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void zbar_increase_verbosity()
     * }
     */
    public static FunctionDescriptor zbar_increase_verbosity$descriptor() {
        return zbar_increase_verbosity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void zbar_increase_verbosity()
     * }
     */
    public static MethodHandle zbar_increase_verbosity$handle() {
        return zbar_increase_verbosity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void zbar_increase_verbosity()
     * }
     */
    public static MemorySegment zbar_increase_verbosity$address() {
        return zbar_increase_verbosity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void zbar_increase_verbosity()
     * }
     */
    public static void zbar_increase_verbosity() {
        var mh$ = zbar_increase_verbosity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_increase_verbosity");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_get_symbol_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_POINTER,
            zbar.C_INT
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_get_symbol_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *zbar_get_symbol_name(zbar_symbol_type_t sym)
     * }
     */
    public static FunctionDescriptor zbar_get_symbol_name$descriptor() {
        return zbar_get_symbol_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *zbar_get_symbol_name(zbar_symbol_type_t sym)
     * }
     */
    public static MethodHandle zbar_get_symbol_name$handle() {
        return zbar_get_symbol_name.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *zbar_get_symbol_name(zbar_symbol_type_t sym)
     * }
     */
    public static MemorySegment zbar_get_symbol_name$address() {
        return zbar_get_symbol_name.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *zbar_get_symbol_name(zbar_symbol_type_t sym)
     * }
     */
    public static MemorySegment zbar_get_symbol_name(int sym) {
        var mh$ = zbar_get_symbol_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_get_symbol_name", sym);
            }
            return (MemorySegment)mh$.invokeExact(sym);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_get_addon_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_POINTER,
            zbar.C_INT
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_get_addon_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *zbar_get_addon_name(zbar_symbol_type_t sym)
     * }
     */
    public static FunctionDescriptor zbar_get_addon_name$descriptor() {
        return zbar_get_addon_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *zbar_get_addon_name(zbar_symbol_type_t sym)
     * }
     */
    public static MethodHandle zbar_get_addon_name$handle() {
        return zbar_get_addon_name.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *zbar_get_addon_name(zbar_symbol_type_t sym)
     * }
     */
    public static MemorySegment zbar_get_addon_name$address() {
        return zbar_get_addon_name.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *zbar_get_addon_name(zbar_symbol_type_t sym)
     * }
     */
    public static MemorySegment zbar_get_addon_name(int sym) {
        var mh$ = zbar_get_addon_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_get_addon_name", sym);
            }
            return (MemorySegment)mh$.invokeExact(sym);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_get_config_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_POINTER,
            zbar.C_INT
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_get_config_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *zbar_get_config_name(zbar_config_t config)
     * }
     */
    public static FunctionDescriptor zbar_get_config_name$descriptor() {
        return zbar_get_config_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *zbar_get_config_name(zbar_config_t config)
     * }
     */
    public static MethodHandle zbar_get_config_name$handle() {
        return zbar_get_config_name.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *zbar_get_config_name(zbar_config_t config)
     * }
     */
    public static MemorySegment zbar_get_config_name$address() {
        return zbar_get_config_name.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *zbar_get_config_name(zbar_config_t config)
     * }
     */
    public static MemorySegment zbar_get_config_name(int config) {
        var mh$ = zbar_get_config_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_get_config_name", config);
            }
            return (MemorySegment)mh$.invokeExact(config);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_get_modifier_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_POINTER,
            zbar.C_INT
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_get_modifier_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *zbar_get_modifier_name(zbar_modifier_t modifier)
     * }
     */
    public static FunctionDescriptor zbar_get_modifier_name$descriptor() {
        return zbar_get_modifier_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *zbar_get_modifier_name(zbar_modifier_t modifier)
     * }
     */
    public static MethodHandle zbar_get_modifier_name$handle() {
        return zbar_get_modifier_name.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *zbar_get_modifier_name(zbar_modifier_t modifier)
     * }
     */
    public static MemorySegment zbar_get_modifier_name$address() {
        return zbar_get_modifier_name.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *zbar_get_modifier_name(zbar_modifier_t modifier)
     * }
     */
    public static MemorySegment zbar_get_modifier_name(int modifier) {
        var mh$ = zbar_get_modifier_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_get_modifier_name", modifier);
            }
            return (MemorySegment)mh$.invokeExact(modifier);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_get_orientation_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_POINTER,
            zbar.C_INT
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_get_orientation_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *zbar_get_orientation_name(zbar_orientation_t orientation)
     * }
     */
    public static FunctionDescriptor zbar_get_orientation_name$descriptor() {
        return zbar_get_orientation_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *zbar_get_orientation_name(zbar_orientation_t orientation)
     * }
     */
    public static MethodHandle zbar_get_orientation_name$handle() {
        return zbar_get_orientation_name.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *zbar_get_orientation_name(zbar_orientation_t orientation)
     * }
     */
    public static MemorySegment zbar_get_orientation_name$address() {
        return zbar_get_orientation_name.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *zbar_get_orientation_name(zbar_orientation_t orientation)
     * }
     */
    public static MemorySegment zbar_get_orientation_name(int orientation) {
        var mh$ = zbar_get_orientation_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_get_orientation_name", orientation);
            }
            return (MemorySegment)mh$.invokeExact(orientation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_parse_config {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_INT,
            zbar.C_POINTER,
            zbar.C_POINTER,
            zbar.C_POINTER,
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_parse_config");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int zbar_parse_config(const char *config_string, zbar_symbol_type_t *symbology, zbar_config_t *config, int *value)
     * }
     */
    public static FunctionDescriptor zbar_parse_config$descriptor() {
        return zbar_parse_config.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int zbar_parse_config(const char *config_string, zbar_symbol_type_t *symbology, zbar_config_t *config, int *value)
     * }
     */
    public static MethodHandle zbar_parse_config$handle() {
        return zbar_parse_config.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int zbar_parse_config(const char *config_string, zbar_symbol_type_t *symbology, zbar_config_t *config, int *value)
     * }
     */
    public static MemorySegment zbar_parse_config$address() {
        return zbar_parse_config.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int zbar_parse_config(const char *config_string, zbar_symbol_type_t *symbology, zbar_config_t *config, int *value)
     * }
     */
    public static int zbar_parse_config(MemorySegment config_string, MemorySegment symbology, MemorySegment config, MemorySegment value) {
        var mh$ = zbar_parse_config.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_parse_config", config_string, symbology, config, value);
            }
            return (int)mh$.invokeExact(config_string, symbology, config, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _zbar_error_spew {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_INT,
            zbar.C_POINTER,
            zbar.C_INT
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("_zbar_error_spew");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int _zbar_error_spew(const void *object, int verbosity)
     * }
     */
    public static FunctionDescriptor _zbar_error_spew$descriptor() {
        return _zbar_error_spew.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int _zbar_error_spew(const void *object, int verbosity)
     * }
     */
    public static MethodHandle _zbar_error_spew$handle() {
        return _zbar_error_spew.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int _zbar_error_spew(const void *object, int verbosity)
     * }
     */
    public static MemorySegment _zbar_error_spew$address() {
        return _zbar_error_spew.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int _zbar_error_spew(const void *object, int verbosity)
     * }
     */
    public static int _zbar_error_spew(MemorySegment object, int verbosity) {
        var mh$ = _zbar_error_spew.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_zbar_error_spew", object, verbosity);
            }
            return (int)mh$.invokeExact(object, verbosity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _zbar_error_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_POINTER,
            zbar.C_POINTER,
            zbar.C_INT
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("_zbar_error_string");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *_zbar_error_string(const void *object, int verbosity)
     * }
     */
    public static FunctionDescriptor _zbar_error_string$descriptor() {
        return _zbar_error_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *_zbar_error_string(const void *object, int verbosity)
     * }
     */
    public static MethodHandle _zbar_error_string$handle() {
        return _zbar_error_string.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *_zbar_error_string(const void *object, int verbosity)
     * }
     */
    public static MemorySegment _zbar_error_string$address() {
        return _zbar_error_string.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *_zbar_error_string(const void *object, int verbosity)
     * }
     */
    public static MemorySegment _zbar_error_string(MemorySegment object, int verbosity) {
        var mh$ = _zbar_error_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_zbar_error_string", object, verbosity);
            }
            return (MemorySegment)mh$.invokeExact(object, verbosity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _zbar_get_error_code {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_INT,
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("_zbar_get_error_code");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern zbar_error_t _zbar_get_error_code(const void *object)
     * }
     */
    public static FunctionDescriptor _zbar_get_error_code$descriptor() {
        return _zbar_get_error_code.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern zbar_error_t _zbar_get_error_code(const void *object)
     * }
     */
    public static MethodHandle _zbar_get_error_code$handle() {
        return _zbar_get_error_code.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern zbar_error_t _zbar_get_error_code(const void *object)
     * }
     */
    public static MemorySegment _zbar_get_error_code$address() {
        return _zbar_get_error_code.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern zbar_error_t _zbar_get_error_code(const void *object)
     * }
     */
    public static int _zbar_get_error_code(MemorySegment object) {
        var mh$ = _zbar_get_error_code.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_zbar_get_error_code", object);
            }
            return (int)mh$.invokeExact(object);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_symbol_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            zbar.C_POINTER,
            zbar.C_INT
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_symbol_ref");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void zbar_symbol_ref(const zbar_symbol_t *symbol, int refs)
     * }
     */
    public static FunctionDescriptor zbar_symbol_ref$descriptor() {
        return zbar_symbol_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void zbar_symbol_ref(const zbar_symbol_t *symbol, int refs)
     * }
     */
    public static MethodHandle zbar_symbol_ref$handle() {
        return zbar_symbol_ref.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void zbar_symbol_ref(const zbar_symbol_t *symbol, int refs)
     * }
     */
    public static MemorySegment zbar_symbol_ref$address() {
        return zbar_symbol_ref.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void zbar_symbol_ref(const zbar_symbol_t *symbol, int refs)
     * }
     */
    public static void zbar_symbol_ref(MemorySegment symbol, int refs) {
        var mh$ = zbar_symbol_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_symbol_ref", symbol, refs);
            }
            mh$.invokeExact(symbol, refs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_symbol_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_INT,
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_symbol_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern zbar_symbol_type_t zbar_symbol_get_type(const zbar_symbol_t *symbol)
     * }
     */
    public static FunctionDescriptor zbar_symbol_get_type$descriptor() {
        return zbar_symbol_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern zbar_symbol_type_t zbar_symbol_get_type(const zbar_symbol_t *symbol)
     * }
     */
    public static MethodHandle zbar_symbol_get_type$handle() {
        return zbar_symbol_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern zbar_symbol_type_t zbar_symbol_get_type(const zbar_symbol_t *symbol)
     * }
     */
    public static MemorySegment zbar_symbol_get_type$address() {
        return zbar_symbol_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern zbar_symbol_type_t zbar_symbol_get_type(const zbar_symbol_t *symbol)
     * }
     */
    public static int zbar_symbol_get_type(MemorySegment symbol) {
        var mh$ = zbar_symbol_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_symbol_get_type", symbol);
            }
            return (int)mh$.invokeExact(symbol);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_symbol_get_configs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_INT,
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_symbol_get_configs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int zbar_symbol_get_configs(const zbar_symbol_t *symbol)
     * }
     */
    public static FunctionDescriptor zbar_symbol_get_configs$descriptor() {
        return zbar_symbol_get_configs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int zbar_symbol_get_configs(const zbar_symbol_t *symbol)
     * }
     */
    public static MethodHandle zbar_symbol_get_configs$handle() {
        return zbar_symbol_get_configs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int zbar_symbol_get_configs(const zbar_symbol_t *symbol)
     * }
     */
    public static MemorySegment zbar_symbol_get_configs$address() {
        return zbar_symbol_get_configs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int zbar_symbol_get_configs(const zbar_symbol_t *symbol)
     * }
     */
    public static int zbar_symbol_get_configs(MemorySegment symbol) {
        var mh$ = zbar_symbol_get_configs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_symbol_get_configs", symbol);
            }
            return (int)mh$.invokeExact(symbol);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_symbol_get_modifiers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_INT,
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_symbol_get_modifiers");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int zbar_symbol_get_modifiers(const zbar_symbol_t *symbol)
     * }
     */
    public static FunctionDescriptor zbar_symbol_get_modifiers$descriptor() {
        return zbar_symbol_get_modifiers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int zbar_symbol_get_modifiers(const zbar_symbol_t *symbol)
     * }
     */
    public static MethodHandle zbar_symbol_get_modifiers$handle() {
        return zbar_symbol_get_modifiers.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int zbar_symbol_get_modifiers(const zbar_symbol_t *symbol)
     * }
     */
    public static MemorySegment zbar_symbol_get_modifiers$address() {
        return zbar_symbol_get_modifiers.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int zbar_symbol_get_modifiers(const zbar_symbol_t *symbol)
     * }
     */
    public static int zbar_symbol_get_modifiers(MemorySegment symbol) {
        var mh$ = zbar_symbol_get_modifiers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_symbol_get_modifiers", symbol);
            }
            return (int)mh$.invokeExact(symbol);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_symbol_get_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_POINTER,
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_symbol_get_data");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *zbar_symbol_get_data(const zbar_symbol_t *symbol)
     * }
     */
    public static FunctionDescriptor zbar_symbol_get_data$descriptor() {
        return zbar_symbol_get_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *zbar_symbol_get_data(const zbar_symbol_t *symbol)
     * }
     */
    public static MethodHandle zbar_symbol_get_data$handle() {
        return zbar_symbol_get_data.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *zbar_symbol_get_data(const zbar_symbol_t *symbol)
     * }
     */
    public static MemorySegment zbar_symbol_get_data$address() {
        return zbar_symbol_get_data.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *zbar_symbol_get_data(const zbar_symbol_t *symbol)
     * }
     */
    public static MemorySegment zbar_symbol_get_data(MemorySegment symbol) {
        var mh$ = zbar_symbol_get_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_symbol_get_data", symbol);
            }
            return (MemorySegment)mh$.invokeExact(symbol);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_symbol_get_data_length {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_INT,
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_symbol_get_data_length");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int zbar_symbol_get_data_length(const zbar_symbol_t *symbol)
     * }
     */
    public static FunctionDescriptor zbar_symbol_get_data_length$descriptor() {
        return zbar_symbol_get_data_length.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int zbar_symbol_get_data_length(const zbar_symbol_t *symbol)
     * }
     */
    public static MethodHandle zbar_symbol_get_data_length$handle() {
        return zbar_symbol_get_data_length.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int zbar_symbol_get_data_length(const zbar_symbol_t *symbol)
     * }
     */
    public static MemorySegment zbar_symbol_get_data_length$address() {
        return zbar_symbol_get_data_length.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int zbar_symbol_get_data_length(const zbar_symbol_t *symbol)
     * }
     */
    public static int zbar_symbol_get_data_length(MemorySegment symbol) {
        var mh$ = zbar_symbol_get_data_length.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_symbol_get_data_length", symbol);
            }
            return (int)mh$.invokeExact(symbol);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_symbol_get_quality {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_INT,
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_symbol_get_quality");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int zbar_symbol_get_quality(const zbar_symbol_t *symbol)
     * }
     */
    public static FunctionDescriptor zbar_symbol_get_quality$descriptor() {
        return zbar_symbol_get_quality.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int zbar_symbol_get_quality(const zbar_symbol_t *symbol)
     * }
     */
    public static MethodHandle zbar_symbol_get_quality$handle() {
        return zbar_symbol_get_quality.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int zbar_symbol_get_quality(const zbar_symbol_t *symbol)
     * }
     */
    public static MemorySegment zbar_symbol_get_quality$address() {
        return zbar_symbol_get_quality.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int zbar_symbol_get_quality(const zbar_symbol_t *symbol)
     * }
     */
    public static int zbar_symbol_get_quality(MemorySegment symbol) {
        var mh$ = zbar_symbol_get_quality.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_symbol_get_quality", symbol);
            }
            return (int)mh$.invokeExact(symbol);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_symbol_get_count {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_INT,
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_symbol_get_count");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int zbar_symbol_get_count(const zbar_symbol_t *symbol)
     * }
     */
    public static FunctionDescriptor zbar_symbol_get_count$descriptor() {
        return zbar_symbol_get_count.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int zbar_symbol_get_count(const zbar_symbol_t *symbol)
     * }
     */
    public static MethodHandle zbar_symbol_get_count$handle() {
        return zbar_symbol_get_count.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int zbar_symbol_get_count(const zbar_symbol_t *symbol)
     * }
     */
    public static MemorySegment zbar_symbol_get_count$address() {
        return zbar_symbol_get_count.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int zbar_symbol_get_count(const zbar_symbol_t *symbol)
     * }
     */
    public static int zbar_symbol_get_count(MemorySegment symbol) {
        var mh$ = zbar_symbol_get_count.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_symbol_get_count", symbol);
            }
            return (int)mh$.invokeExact(symbol);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_symbol_get_loc_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_INT,
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_symbol_get_loc_size");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int zbar_symbol_get_loc_size(const zbar_symbol_t *symbol)
     * }
     */
    public static FunctionDescriptor zbar_symbol_get_loc_size$descriptor() {
        return zbar_symbol_get_loc_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int zbar_symbol_get_loc_size(const zbar_symbol_t *symbol)
     * }
     */
    public static MethodHandle zbar_symbol_get_loc_size$handle() {
        return zbar_symbol_get_loc_size.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int zbar_symbol_get_loc_size(const zbar_symbol_t *symbol)
     * }
     */
    public static MemorySegment zbar_symbol_get_loc_size$address() {
        return zbar_symbol_get_loc_size.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int zbar_symbol_get_loc_size(const zbar_symbol_t *symbol)
     * }
     */
    public static int zbar_symbol_get_loc_size(MemorySegment symbol) {
        var mh$ = zbar_symbol_get_loc_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_symbol_get_loc_size", symbol);
            }
            return (int)mh$.invokeExact(symbol);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_symbol_get_loc_x {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_INT,
            zbar.C_POINTER,
            zbar.C_INT
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_symbol_get_loc_x");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int zbar_symbol_get_loc_x(const zbar_symbol_t *symbol, unsigned int index)
     * }
     */
    public static FunctionDescriptor zbar_symbol_get_loc_x$descriptor() {
        return zbar_symbol_get_loc_x.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int zbar_symbol_get_loc_x(const zbar_symbol_t *symbol, unsigned int index)
     * }
     */
    public static MethodHandle zbar_symbol_get_loc_x$handle() {
        return zbar_symbol_get_loc_x.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int zbar_symbol_get_loc_x(const zbar_symbol_t *symbol, unsigned int index)
     * }
     */
    public static MemorySegment zbar_symbol_get_loc_x$address() {
        return zbar_symbol_get_loc_x.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int zbar_symbol_get_loc_x(const zbar_symbol_t *symbol, unsigned int index)
     * }
     */
    public static int zbar_symbol_get_loc_x(MemorySegment symbol, int index) {
        var mh$ = zbar_symbol_get_loc_x.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_symbol_get_loc_x", symbol, index);
            }
            return (int)mh$.invokeExact(symbol, index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_symbol_get_loc_y {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_INT,
            zbar.C_POINTER,
            zbar.C_INT
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_symbol_get_loc_y");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int zbar_symbol_get_loc_y(const zbar_symbol_t *symbol, unsigned int index)
     * }
     */
    public static FunctionDescriptor zbar_symbol_get_loc_y$descriptor() {
        return zbar_symbol_get_loc_y.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int zbar_symbol_get_loc_y(const zbar_symbol_t *symbol, unsigned int index)
     * }
     */
    public static MethodHandle zbar_symbol_get_loc_y$handle() {
        return zbar_symbol_get_loc_y.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int zbar_symbol_get_loc_y(const zbar_symbol_t *symbol, unsigned int index)
     * }
     */
    public static MemorySegment zbar_symbol_get_loc_y$address() {
        return zbar_symbol_get_loc_y.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int zbar_symbol_get_loc_y(const zbar_symbol_t *symbol, unsigned int index)
     * }
     */
    public static int zbar_symbol_get_loc_y(MemorySegment symbol, int index) {
        var mh$ = zbar_symbol_get_loc_y.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_symbol_get_loc_y", symbol, index);
            }
            return (int)mh$.invokeExact(symbol, index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_symbol_get_orientation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_INT,
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_symbol_get_orientation");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern zbar_orientation_t zbar_symbol_get_orientation(const zbar_symbol_t *symbol)
     * }
     */
    public static FunctionDescriptor zbar_symbol_get_orientation$descriptor() {
        return zbar_symbol_get_orientation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern zbar_orientation_t zbar_symbol_get_orientation(const zbar_symbol_t *symbol)
     * }
     */
    public static MethodHandle zbar_symbol_get_orientation$handle() {
        return zbar_symbol_get_orientation.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern zbar_orientation_t zbar_symbol_get_orientation(const zbar_symbol_t *symbol)
     * }
     */
    public static MemorySegment zbar_symbol_get_orientation$address() {
        return zbar_symbol_get_orientation.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern zbar_orientation_t zbar_symbol_get_orientation(const zbar_symbol_t *symbol)
     * }
     */
    public static int zbar_symbol_get_orientation(MemorySegment symbol) {
        var mh$ = zbar_symbol_get_orientation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_symbol_get_orientation", symbol);
            }
            return (int)mh$.invokeExact(symbol);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_symbol_next {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_POINTER,
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_symbol_next");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const zbar_symbol_t *zbar_symbol_next(const zbar_symbol_t *symbol)
     * }
     */
    public static FunctionDescriptor zbar_symbol_next$descriptor() {
        return zbar_symbol_next.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const zbar_symbol_t *zbar_symbol_next(const zbar_symbol_t *symbol)
     * }
     */
    public static MethodHandle zbar_symbol_next$handle() {
        return zbar_symbol_next.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const zbar_symbol_t *zbar_symbol_next(const zbar_symbol_t *symbol)
     * }
     */
    public static MemorySegment zbar_symbol_next$address() {
        return zbar_symbol_next.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const zbar_symbol_t *zbar_symbol_next(const zbar_symbol_t *symbol)
     * }
     */
    public static MemorySegment zbar_symbol_next(MemorySegment symbol) {
        var mh$ = zbar_symbol_next.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_symbol_next", symbol);
            }
            return (MemorySegment)mh$.invokeExact(symbol);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_symbol_get_components {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_POINTER,
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_symbol_get_components");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const zbar_symbol_set_t *zbar_symbol_get_components(const zbar_symbol_t *symbol)
     * }
     */
    public static FunctionDescriptor zbar_symbol_get_components$descriptor() {
        return zbar_symbol_get_components.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const zbar_symbol_set_t *zbar_symbol_get_components(const zbar_symbol_t *symbol)
     * }
     */
    public static MethodHandle zbar_symbol_get_components$handle() {
        return zbar_symbol_get_components.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const zbar_symbol_set_t *zbar_symbol_get_components(const zbar_symbol_t *symbol)
     * }
     */
    public static MemorySegment zbar_symbol_get_components$address() {
        return zbar_symbol_get_components.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const zbar_symbol_set_t *zbar_symbol_get_components(const zbar_symbol_t *symbol)
     * }
     */
    public static MemorySegment zbar_symbol_get_components(MemorySegment symbol) {
        var mh$ = zbar_symbol_get_components.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_symbol_get_components", symbol);
            }
            return (MemorySegment)mh$.invokeExact(symbol);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_symbol_first_component {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_POINTER,
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_symbol_first_component");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const zbar_symbol_t *zbar_symbol_first_component(const zbar_symbol_t *symbol)
     * }
     */
    public static FunctionDescriptor zbar_symbol_first_component$descriptor() {
        return zbar_symbol_first_component.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const zbar_symbol_t *zbar_symbol_first_component(const zbar_symbol_t *symbol)
     * }
     */
    public static MethodHandle zbar_symbol_first_component$handle() {
        return zbar_symbol_first_component.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const zbar_symbol_t *zbar_symbol_first_component(const zbar_symbol_t *symbol)
     * }
     */
    public static MemorySegment zbar_symbol_first_component$address() {
        return zbar_symbol_first_component.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const zbar_symbol_t *zbar_symbol_first_component(const zbar_symbol_t *symbol)
     * }
     */
    public static MemorySegment zbar_symbol_first_component(MemorySegment symbol) {
        var mh$ = zbar_symbol_first_component.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_symbol_first_component", symbol);
            }
            return (MemorySegment)mh$.invokeExact(symbol);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_symbol_xml {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_POINTER,
            zbar.C_POINTER,
            zbar.C_POINTER,
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_symbol_xml");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *zbar_symbol_xml(const zbar_symbol_t *symbol, char **buffer, unsigned int *buflen)
     * }
     */
    public static FunctionDescriptor zbar_symbol_xml$descriptor() {
        return zbar_symbol_xml.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *zbar_symbol_xml(const zbar_symbol_t *symbol, char **buffer, unsigned int *buflen)
     * }
     */
    public static MethodHandle zbar_symbol_xml$handle() {
        return zbar_symbol_xml.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *zbar_symbol_xml(const zbar_symbol_t *symbol, char **buffer, unsigned int *buflen)
     * }
     */
    public static MemorySegment zbar_symbol_xml$address() {
        return zbar_symbol_xml.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *zbar_symbol_xml(const zbar_symbol_t *symbol, char **buffer, unsigned int *buflen)
     * }
     */
    public static MemorySegment zbar_symbol_xml(MemorySegment symbol, MemorySegment buffer, MemorySegment buflen) {
        var mh$ = zbar_symbol_xml.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_symbol_xml", symbol, buffer, buflen);
            }
            return (MemorySegment)mh$.invokeExact(symbol, buffer, buflen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_symbol_set_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            zbar.C_POINTER,
            zbar.C_INT
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_symbol_set_ref");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void zbar_symbol_set_ref(const zbar_symbol_set_t *symbols, int refs)
     * }
     */
    public static FunctionDescriptor zbar_symbol_set_ref$descriptor() {
        return zbar_symbol_set_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void zbar_symbol_set_ref(const zbar_symbol_set_t *symbols, int refs)
     * }
     */
    public static MethodHandle zbar_symbol_set_ref$handle() {
        return zbar_symbol_set_ref.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void zbar_symbol_set_ref(const zbar_symbol_set_t *symbols, int refs)
     * }
     */
    public static MemorySegment zbar_symbol_set_ref$address() {
        return zbar_symbol_set_ref.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void zbar_symbol_set_ref(const zbar_symbol_set_t *symbols, int refs)
     * }
     */
    public static void zbar_symbol_set_ref(MemorySegment symbols, int refs) {
        var mh$ = zbar_symbol_set_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_symbol_set_ref", symbols, refs);
            }
            mh$.invokeExact(symbols, refs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_symbol_set_get_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_INT,
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_symbol_set_get_size");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int zbar_symbol_set_get_size(const zbar_symbol_set_t *symbols)
     * }
     */
    public static FunctionDescriptor zbar_symbol_set_get_size$descriptor() {
        return zbar_symbol_set_get_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int zbar_symbol_set_get_size(const zbar_symbol_set_t *symbols)
     * }
     */
    public static MethodHandle zbar_symbol_set_get_size$handle() {
        return zbar_symbol_set_get_size.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int zbar_symbol_set_get_size(const zbar_symbol_set_t *symbols)
     * }
     */
    public static MemorySegment zbar_symbol_set_get_size$address() {
        return zbar_symbol_set_get_size.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int zbar_symbol_set_get_size(const zbar_symbol_set_t *symbols)
     * }
     */
    public static int zbar_symbol_set_get_size(MemorySegment symbols) {
        var mh$ = zbar_symbol_set_get_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_symbol_set_get_size", symbols);
            }
            return (int)mh$.invokeExact(symbols);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_symbol_set_first_symbol {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_POINTER,
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_symbol_set_first_symbol");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const zbar_symbol_t *zbar_symbol_set_first_symbol(const zbar_symbol_set_t *symbols)
     * }
     */
    public static FunctionDescriptor zbar_symbol_set_first_symbol$descriptor() {
        return zbar_symbol_set_first_symbol.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const zbar_symbol_t *zbar_symbol_set_first_symbol(const zbar_symbol_set_t *symbols)
     * }
     */
    public static MethodHandle zbar_symbol_set_first_symbol$handle() {
        return zbar_symbol_set_first_symbol.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const zbar_symbol_t *zbar_symbol_set_first_symbol(const zbar_symbol_set_t *symbols)
     * }
     */
    public static MemorySegment zbar_symbol_set_first_symbol$address() {
        return zbar_symbol_set_first_symbol.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const zbar_symbol_t *zbar_symbol_set_first_symbol(const zbar_symbol_set_t *symbols)
     * }
     */
    public static MemorySegment zbar_symbol_set_first_symbol(MemorySegment symbols) {
        var mh$ = zbar_symbol_set_first_symbol.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_symbol_set_first_symbol", symbols);
            }
            return (MemorySegment)mh$.invokeExact(symbols);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_symbol_set_first_unfiltered {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_POINTER,
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_symbol_set_first_unfiltered");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const zbar_symbol_t *zbar_symbol_set_first_unfiltered(const zbar_symbol_set_t *symbols)
     * }
     */
    public static FunctionDescriptor zbar_symbol_set_first_unfiltered$descriptor() {
        return zbar_symbol_set_first_unfiltered.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const zbar_symbol_t *zbar_symbol_set_first_unfiltered(const zbar_symbol_set_t *symbols)
     * }
     */
    public static MethodHandle zbar_symbol_set_first_unfiltered$handle() {
        return zbar_symbol_set_first_unfiltered.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const zbar_symbol_t *zbar_symbol_set_first_unfiltered(const zbar_symbol_set_t *symbols)
     * }
     */
    public static MemorySegment zbar_symbol_set_first_unfiltered$address() {
        return zbar_symbol_set_first_unfiltered.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const zbar_symbol_t *zbar_symbol_set_first_unfiltered(const zbar_symbol_set_t *symbols)
     * }
     */
    public static MemorySegment zbar_symbol_set_first_unfiltered(MemorySegment symbols) {
        var mh$ = zbar_symbol_set_first_unfiltered.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_symbol_set_first_unfiltered", symbols);
            }
            return (MemorySegment)mh$.invokeExact(symbols);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_image_create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_POINTER    );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_image_create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern zbar_image_t *zbar_image_create()
     * }
     */
    public static FunctionDescriptor zbar_image_create$descriptor() {
        return zbar_image_create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern zbar_image_t *zbar_image_create()
     * }
     */
    public static MethodHandle zbar_image_create$handle() {
        return zbar_image_create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern zbar_image_t *zbar_image_create()
     * }
     */
    public static MemorySegment zbar_image_create$address() {
        return zbar_image_create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern zbar_image_t *zbar_image_create()
     * }
     */
    public static MemorySegment zbar_image_create() {
        var mh$ = zbar_image_create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_image_create");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_image_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_image_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void zbar_image_destroy(zbar_image_t *image)
     * }
     */
    public static FunctionDescriptor zbar_image_destroy$descriptor() {
        return zbar_image_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void zbar_image_destroy(zbar_image_t *image)
     * }
     */
    public static MethodHandle zbar_image_destroy$handle() {
        return zbar_image_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void zbar_image_destroy(zbar_image_t *image)
     * }
     */
    public static MemorySegment zbar_image_destroy$address() {
        return zbar_image_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void zbar_image_destroy(zbar_image_t *image)
     * }
     */
    public static void zbar_image_destroy(MemorySegment image) {
        var mh$ = zbar_image_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_image_destroy", image);
            }
            mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_image_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            zbar.C_POINTER,
            zbar.C_INT
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_image_ref");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void zbar_image_ref(zbar_image_t *image, int refs)
     * }
     */
    public static FunctionDescriptor zbar_image_ref$descriptor() {
        return zbar_image_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void zbar_image_ref(zbar_image_t *image, int refs)
     * }
     */
    public static MethodHandle zbar_image_ref$handle() {
        return zbar_image_ref.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void zbar_image_ref(zbar_image_t *image, int refs)
     * }
     */
    public static MemorySegment zbar_image_ref$address() {
        return zbar_image_ref.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void zbar_image_ref(zbar_image_t *image, int refs)
     * }
     */
    public static void zbar_image_ref(MemorySegment image, int refs) {
        var mh$ = zbar_image_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_image_ref", image, refs);
            }
            mh$.invokeExact(image, refs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_image_convert {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_POINTER,
            zbar.C_POINTER,
            zbar.C_LONG
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_image_convert");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern zbar_image_t *zbar_image_convert(const zbar_image_t *image, unsigned long format)
     * }
     */
    public static FunctionDescriptor zbar_image_convert$descriptor() {
        return zbar_image_convert.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern zbar_image_t *zbar_image_convert(const zbar_image_t *image, unsigned long format)
     * }
     */
    public static MethodHandle zbar_image_convert$handle() {
        return zbar_image_convert.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern zbar_image_t *zbar_image_convert(const zbar_image_t *image, unsigned long format)
     * }
     */
    public static MemorySegment zbar_image_convert$address() {
        return zbar_image_convert.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern zbar_image_t *zbar_image_convert(const zbar_image_t *image, unsigned long format)
     * }
     */
    public static MemorySegment zbar_image_convert(MemorySegment image, long format) {
        var mh$ = zbar_image_convert.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_image_convert", image, format);
            }
            return (MemorySegment)mh$.invokeExact(image, format);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_image_convert_resize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_POINTER,
            zbar.C_POINTER,
            zbar.C_LONG,
            zbar.C_INT,
            zbar.C_INT
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_image_convert_resize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern zbar_image_t *zbar_image_convert_resize(const zbar_image_t *image, unsigned long format, unsigned int width, unsigned int height)
     * }
     */
    public static FunctionDescriptor zbar_image_convert_resize$descriptor() {
        return zbar_image_convert_resize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern zbar_image_t *zbar_image_convert_resize(const zbar_image_t *image, unsigned long format, unsigned int width, unsigned int height)
     * }
     */
    public static MethodHandle zbar_image_convert_resize$handle() {
        return zbar_image_convert_resize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern zbar_image_t *zbar_image_convert_resize(const zbar_image_t *image, unsigned long format, unsigned int width, unsigned int height)
     * }
     */
    public static MemorySegment zbar_image_convert_resize$address() {
        return zbar_image_convert_resize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern zbar_image_t *zbar_image_convert_resize(const zbar_image_t *image, unsigned long format, unsigned int width, unsigned int height)
     * }
     */
    public static MemorySegment zbar_image_convert_resize(MemorySegment image, long format, int width, int height) {
        var mh$ = zbar_image_convert_resize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_image_convert_resize", image, format, width, height);
            }
            return (MemorySegment)mh$.invokeExact(image, format, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_image_get_format {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_LONG,
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_image_get_format");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned long zbar_image_get_format(const zbar_image_t *image)
     * }
     */
    public static FunctionDescriptor zbar_image_get_format$descriptor() {
        return zbar_image_get_format.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned long zbar_image_get_format(const zbar_image_t *image)
     * }
     */
    public static MethodHandle zbar_image_get_format$handle() {
        return zbar_image_get_format.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned long zbar_image_get_format(const zbar_image_t *image)
     * }
     */
    public static MemorySegment zbar_image_get_format$address() {
        return zbar_image_get_format.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned long zbar_image_get_format(const zbar_image_t *image)
     * }
     */
    public static long zbar_image_get_format(MemorySegment image) {
        var mh$ = zbar_image_get_format.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_image_get_format", image);
            }
            return (long)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_image_get_sequence {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_INT,
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_image_get_sequence");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int zbar_image_get_sequence(const zbar_image_t *image)
     * }
     */
    public static FunctionDescriptor zbar_image_get_sequence$descriptor() {
        return zbar_image_get_sequence.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int zbar_image_get_sequence(const zbar_image_t *image)
     * }
     */
    public static MethodHandle zbar_image_get_sequence$handle() {
        return zbar_image_get_sequence.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int zbar_image_get_sequence(const zbar_image_t *image)
     * }
     */
    public static MemorySegment zbar_image_get_sequence$address() {
        return zbar_image_get_sequence.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int zbar_image_get_sequence(const zbar_image_t *image)
     * }
     */
    public static int zbar_image_get_sequence(MemorySegment image) {
        var mh$ = zbar_image_get_sequence.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_image_get_sequence", image);
            }
            return (int)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_image_get_width {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_INT,
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_image_get_width");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int zbar_image_get_width(const zbar_image_t *image)
     * }
     */
    public static FunctionDescriptor zbar_image_get_width$descriptor() {
        return zbar_image_get_width.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int zbar_image_get_width(const zbar_image_t *image)
     * }
     */
    public static MethodHandle zbar_image_get_width$handle() {
        return zbar_image_get_width.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int zbar_image_get_width(const zbar_image_t *image)
     * }
     */
    public static MemorySegment zbar_image_get_width$address() {
        return zbar_image_get_width.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int zbar_image_get_width(const zbar_image_t *image)
     * }
     */
    public static int zbar_image_get_width(MemorySegment image) {
        var mh$ = zbar_image_get_width.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_image_get_width", image);
            }
            return (int)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_image_get_height {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_INT,
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_image_get_height");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int zbar_image_get_height(const zbar_image_t *image)
     * }
     */
    public static FunctionDescriptor zbar_image_get_height$descriptor() {
        return zbar_image_get_height.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int zbar_image_get_height(const zbar_image_t *image)
     * }
     */
    public static MethodHandle zbar_image_get_height$handle() {
        return zbar_image_get_height.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int zbar_image_get_height(const zbar_image_t *image)
     * }
     */
    public static MemorySegment zbar_image_get_height$address() {
        return zbar_image_get_height.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int zbar_image_get_height(const zbar_image_t *image)
     * }
     */
    public static int zbar_image_get_height(MemorySegment image) {
        var mh$ = zbar_image_get_height.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_image_get_height", image);
            }
            return (int)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_image_get_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            zbar.C_POINTER,
            zbar.C_POINTER,
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_image_get_size");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void zbar_image_get_size(const zbar_image_t *image, unsigned int *width, unsigned int *height)
     * }
     */
    public static FunctionDescriptor zbar_image_get_size$descriptor() {
        return zbar_image_get_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void zbar_image_get_size(const zbar_image_t *image, unsigned int *width, unsigned int *height)
     * }
     */
    public static MethodHandle zbar_image_get_size$handle() {
        return zbar_image_get_size.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void zbar_image_get_size(const zbar_image_t *image, unsigned int *width, unsigned int *height)
     * }
     */
    public static MemorySegment zbar_image_get_size$address() {
        return zbar_image_get_size.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void zbar_image_get_size(const zbar_image_t *image, unsigned int *width, unsigned int *height)
     * }
     */
    public static void zbar_image_get_size(MemorySegment image, MemorySegment width, MemorySegment height) {
        var mh$ = zbar_image_get_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_image_get_size", image, width, height);
            }
            mh$.invokeExact(image, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_image_get_crop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            zbar.C_POINTER,
            zbar.C_POINTER,
            zbar.C_POINTER,
            zbar.C_POINTER,
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_image_get_crop");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void zbar_image_get_crop(const zbar_image_t *image, unsigned int *x, unsigned int *y, unsigned int *width, unsigned int *height)
     * }
     */
    public static FunctionDescriptor zbar_image_get_crop$descriptor() {
        return zbar_image_get_crop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void zbar_image_get_crop(const zbar_image_t *image, unsigned int *x, unsigned int *y, unsigned int *width, unsigned int *height)
     * }
     */
    public static MethodHandle zbar_image_get_crop$handle() {
        return zbar_image_get_crop.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void zbar_image_get_crop(const zbar_image_t *image, unsigned int *x, unsigned int *y, unsigned int *width, unsigned int *height)
     * }
     */
    public static MemorySegment zbar_image_get_crop$address() {
        return zbar_image_get_crop.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void zbar_image_get_crop(const zbar_image_t *image, unsigned int *x, unsigned int *y, unsigned int *width, unsigned int *height)
     * }
     */
    public static void zbar_image_get_crop(MemorySegment image, MemorySegment x, MemorySegment y, MemorySegment width, MemorySegment height) {
        var mh$ = zbar_image_get_crop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_image_get_crop", image, x, y, width, height);
            }
            mh$.invokeExact(image, x, y, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_image_get_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_POINTER,
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_image_get_data");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const void *zbar_image_get_data(const zbar_image_t *image)
     * }
     */
    public static FunctionDescriptor zbar_image_get_data$descriptor() {
        return zbar_image_get_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const void *zbar_image_get_data(const zbar_image_t *image)
     * }
     */
    public static MethodHandle zbar_image_get_data$handle() {
        return zbar_image_get_data.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const void *zbar_image_get_data(const zbar_image_t *image)
     * }
     */
    public static MemorySegment zbar_image_get_data$address() {
        return zbar_image_get_data.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const void *zbar_image_get_data(const zbar_image_t *image)
     * }
     */
    public static MemorySegment zbar_image_get_data(MemorySegment image) {
        var mh$ = zbar_image_get_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_image_get_data", image);
            }
            return (MemorySegment)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_image_get_data_length {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_LONG,
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_image_get_data_length");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned long zbar_image_get_data_length(const zbar_image_t *img)
     * }
     */
    public static FunctionDescriptor zbar_image_get_data_length$descriptor() {
        return zbar_image_get_data_length.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned long zbar_image_get_data_length(const zbar_image_t *img)
     * }
     */
    public static MethodHandle zbar_image_get_data_length$handle() {
        return zbar_image_get_data_length.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned long zbar_image_get_data_length(const zbar_image_t *img)
     * }
     */
    public static MemorySegment zbar_image_get_data_length$address() {
        return zbar_image_get_data_length.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned long zbar_image_get_data_length(const zbar_image_t *img)
     * }
     */
    public static long zbar_image_get_data_length(MemorySegment img) {
        var mh$ = zbar_image_get_data_length.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_image_get_data_length", img);
            }
            return (long)mh$.invokeExact(img);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_image_get_symbols {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_POINTER,
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_image_get_symbols");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const zbar_symbol_set_t *zbar_image_get_symbols(const zbar_image_t *image)
     * }
     */
    public static FunctionDescriptor zbar_image_get_symbols$descriptor() {
        return zbar_image_get_symbols.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const zbar_symbol_set_t *zbar_image_get_symbols(const zbar_image_t *image)
     * }
     */
    public static MethodHandle zbar_image_get_symbols$handle() {
        return zbar_image_get_symbols.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const zbar_symbol_set_t *zbar_image_get_symbols(const zbar_image_t *image)
     * }
     */
    public static MemorySegment zbar_image_get_symbols$address() {
        return zbar_image_get_symbols.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const zbar_symbol_set_t *zbar_image_get_symbols(const zbar_image_t *image)
     * }
     */
    public static MemorySegment zbar_image_get_symbols(MemorySegment image) {
        var mh$ = zbar_image_get_symbols.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_image_get_symbols", image);
            }
            return (MemorySegment)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_image_set_symbols {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            zbar.C_POINTER,
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_image_set_symbols");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void zbar_image_set_symbols(zbar_image_t *image, const zbar_symbol_set_t *symbols)
     * }
     */
    public static FunctionDescriptor zbar_image_set_symbols$descriptor() {
        return zbar_image_set_symbols.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void zbar_image_set_symbols(zbar_image_t *image, const zbar_symbol_set_t *symbols)
     * }
     */
    public static MethodHandle zbar_image_set_symbols$handle() {
        return zbar_image_set_symbols.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void zbar_image_set_symbols(zbar_image_t *image, const zbar_symbol_set_t *symbols)
     * }
     */
    public static MemorySegment zbar_image_set_symbols$address() {
        return zbar_image_set_symbols.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void zbar_image_set_symbols(zbar_image_t *image, const zbar_symbol_set_t *symbols)
     * }
     */
    public static void zbar_image_set_symbols(MemorySegment image, MemorySegment symbols) {
        var mh$ = zbar_image_set_symbols.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_image_set_symbols", image, symbols);
            }
            mh$.invokeExact(image, symbols);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_image_first_symbol {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_POINTER,
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_image_first_symbol");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const zbar_symbol_t *zbar_image_first_symbol(const zbar_image_t *image)
     * }
     */
    public static FunctionDescriptor zbar_image_first_symbol$descriptor() {
        return zbar_image_first_symbol.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const zbar_symbol_t *zbar_image_first_symbol(const zbar_image_t *image)
     * }
     */
    public static MethodHandle zbar_image_first_symbol$handle() {
        return zbar_image_first_symbol.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const zbar_symbol_t *zbar_image_first_symbol(const zbar_image_t *image)
     * }
     */
    public static MemorySegment zbar_image_first_symbol$address() {
        return zbar_image_first_symbol.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const zbar_symbol_t *zbar_image_first_symbol(const zbar_image_t *image)
     * }
     */
    public static MemorySegment zbar_image_first_symbol(MemorySegment image) {
        var mh$ = zbar_image_first_symbol.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_image_first_symbol", image);
            }
            return (MemorySegment)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_image_set_format {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            zbar.C_POINTER,
            zbar.C_LONG
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_image_set_format");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void zbar_image_set_format(zbar_image_t *image, unsigned long format)
     * }
     */
    public static FunctionDescriptor zbar_image_set_format$descriptor() {
        return zbar_image_set_format.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void zbar_image_set_format(zbar_image_t *image, unsigned long format)
     * }
     */
    public static MethodHandle zbar_image_set_format$handle() {
        return zbar_image_set_format.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void zbar_image_set_format(zbar_image_t *image, unsigned long format)
     * }
     */
    public static MemorySegment zbar_image_set_format$address() {
        return zbar_image_set_format.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void zbar_image_set_format(zbar_image_t *image, unsigned long format)
     * }
     */
    public static void zbar_image_set_format(MemorySegment image, long format) {
        var mh$ = zbar_image_set_format.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_image_set_format", image, format);
            }
            mh$.invokeExact(image, format);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_image_set_sequence {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            zbar.C_POINTER,
            zbar.C_INT
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_image_set_sequence");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void zbar_image_set_sequence(zbar_image_t *image, unsigned int sequence_num)
     * }
     */
    public static FunctionDescriptor zbar_image_set_sequence$descriptor() {
        return zbar_image_set_sequence.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void zbar_image_set_sequence(zbar_image_t *image, unsigned int sequence_num)
     * }
     */
    public static MethodHandle zbar_image_set_sequence$handle() {
        return zbar_image_set_sequence.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void zbar_image_set_sequence(zbar_image_t *image, unsigned int sequence_num)
     * }
     */
    public static MemorySegment zbar_image_set_sequence$address() {
        return zbar_image_set_sequence.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void zbar_image_set_sequence(zbar_image_t *image, unsigned int sequence_num)
     * }
     */
    public static void zbar_image_set_sequence(MemorySegment image, int sequence_num) {
        var mh$ = zbar_image_set_sequence.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_image_set_sequence", image, sequence_num);
            }
            mh$.invokeExact(image, sequence_num);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_image_set_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            zbar.C_POINTER,
            zbar.C_INT,
            zbar.C_INT
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_image_set_size");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void zbar_image_set_size(zbar_image_t *image, unsigned int width, unsigned int height)
     * }
     */
    public static FunctionDescriptor zbar_image_set_size$descriptor() {
        return zbar_image_set_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void zbar_image_set_size(zbar_image_t *image, unsigned int width, unsigned int height)
     * }
     */
    public static MethodHandle zbar_image_set_size$handle() {
        return zbar_image_set_size.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void zbar_image_set_size(zbar_image_t *image, unsigned int width, unsigned int height)
     * }
     */
    public static MemorySegment zbar_image_set_size$address() {
        return zbar_image_set_size.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void zbar_image_set_size(zbar_image_t *image, unsigned int width, unsigned int height)
     * }
     */
    public static void zbar_image_set_size(MemorySegment image, int width, int height) {
        var mh$ = zbar_image_set_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_image_set_size", image, width, height);
            }
            mh$.invokeExact(image, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_image_set_crop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            zbar.C_POINTER,
            zbar.C_INT,
            zbar.C_INT,
            zbar.C_INT,
            zbar.C_INT
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_image_set_crop");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void zbar_image_set_crop(zbar_image_t *image, unsigned int x, unsigned int y, unsigned int width, unsigned int height)
     * }
     */
    public static FunctionDescriptor zbar_image_set_crop$descriptor() {
        return zbar_image_set_crop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void zbar_image_set_crop(zbar_image_t *image, unsigned int x, unsigned int y, unsigned int width, unsigned int height)
     * }
     */
    public static MethodHandle zbar_image_set_crop$handle() {
        return zbar_image_set_crop.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void zbar_image_set_crop(zbar_image_t *image, unsigned int x, unsigned int y, unsigned int width, unsigned int height)
     * }
     */
    public static MemorySegment zbar_image_set_crop$address() {
        return zbar_image_set_crop.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void zbar_image_set_crop(zbar_image_t *image, unsigned int x, unsigned int y, unsigned int width, unsigned int height)
     * }
     */
    public static void zbar_image_set_crop(MemorySegment image, int x, int y, int width, int height) {
        var mh$ = zbar_image_set_crop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_image_set_crop", image, x, y, width, height);
            }
            mh$.invokeExact(image, x, y, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_image_set_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            zbar.C_POINTER,
            zbar.C_POINTER,
            zbar.C_LONG,
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_image_set_data");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void zbar_image_set_data(zbar_image_t *image, const void *data, unsigned long data_byte_length, zbar_image_cleanup_handler_t *cleanup_hndlr)
     * }
     */
    public static FunctionDescriptor zbar_image_set_data$descriptor() {
        return zbar_image_set_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void zbar_image_set_data(zbar_image_t *image, const void *data, unsigned long data_byte_length, zbar_image_cleanup_handler_t *cleanup_hndlr)
     * }
     */
    public static MethodHandle zbar_image_set_data$handle() {
        return zbar_image_set_data.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void zbar_image_set_data(zbar_image_t *image, const void *data, unsigned long data_byte_length, zbar_image_cleanup_handler_t *cleanup_hndlr)
     * }
     */
    public static MemorySegment zbar_image_set_data$address() {
        return zbar_image_set_data.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void zbar_image_set_data(zbar_image_t *image, const void *data, unsigned long data_byte_length, zbar_image_cleanup_handler_t *cleanup_hndlr)
     * }
     */
    public static void zbar_image_set_data(MemorySegment image, MemorySegment data, long data_byte_length, MemorySegment cleanup_hndlr) {
        var mh$ = zbar_image_set_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_image_set_data", image, data, data_byte_length, cleanup_hndlr);
            }
            mh$.invokeExact(image, data, data_byte_length, cleanup_hndlr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_image_free_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_image_free_data");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void zbar_image_free_data(zbar_image_t *image)
     * }
     */
    public static FunctionDescriptor zbar_image_free_data$descriptor() {
        return zbar_image_free_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void zbar_image_free_data(zbar_image_t *image)
     * }
     */
    public static MethodHandle zbar_image_free_data$handle() {
        return zbar_image_free_data.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void zbar_image_free_data(zbar_image_t *image)
     * }
     */
    public static MemorySegment zbar_image_free_data$address() {
        return zbar_image_free_data.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void zbar_image_free_data(zbar_image_t *image)
     * }
     */
    public static void zbar_image_free_data(MemorySegment image) {
        var mh$ = zbar_image_free_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_image_free_data", image);
            }
            mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_image_set_userdata {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            zbar.C_POINTER,
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_image_set_userdata");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void zbar_image_set_userdata(zbar_image_t *image, void *userdata)
     * }
     */
    public static FunctionDescriptor zbar_image_set_userdata$descriptor() {
        return zbar_image_set_userdata.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void zbar_image_set_userdata(zbar_image_t *image, void *userdata)
     * }
     */
    public static MethodHandle zbar_image_set_userdata$handle() {
        return zbar_image_set_userdata.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void zbar_image_set_userdata(zbar_image_t *image, void *userdata)
     * }
     */
    public static MemorySegment zbar_image_set_userdata$address() {
        return zbar_image_set_userdata.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void zbar_image_set_userdata(zbar_image_t *image, void *userdata)
     * }
     */
    public static void zbar_image_set_userdata(MemorySegment image, MemorySegment userdata) {
        var mh$ = zbar_image_set_userdata.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_image_set_userdata", image, userdata);
            }
            mh$.invokeExact(image, userdata);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_image_get_userdata {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_POINTER,
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_image_get_userdata");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *zbar_image_get_userdata(const zbar_image_t *image)
     * }
     */
    public static FunctionDescriptor zbar_image_get_userdata$descriptor() {
        return zbar_image_get_userdata.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *zbar_image_get_userdata(const zbar_image_t *image)
     * }
     */
    public static MethodHandle zbar_image_get_userdata$handle() {
        return zbar_image_get_userdata.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void *zbar_image_get_userdata(const zbar_image_t *image)
     * }
     */
    public static MemorySegment zbar_image_get_userdata$address() {
        return zbar_image_get_userdata.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void *zbar_image_get_userdata(const zbar_image_t *image)
     * }
     */
    public static MemorySegment zbar_image_get_userdata(MemorySegment image) {
        var mh$ = zbar_image_get_userdata.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_image_get_userdata", image);
            }
            return (MemorySegment)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_image_write {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_INT,
            zbar.C_POINTER,
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_image_write");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int zbar_image_write(const zbar_image_t *image, const char *filebase)
     * }
     */
    public static FunctionDescriptor zbar_image_write$descriptor() {
        return zbar_image_write.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int zbar_image_write(const zbar_image_t *image, const char *filebase)
     * }
     */
    public static MethodHandle zbar_image_write$handle() {
        return zbar_image_write.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int zbar_image_write(const zbar_image_t *image, const char *filebase)
     * }
     */
    public static MemorySegment zbar_image_write$address() {
        return zbar_image_write.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int zbar_image_write(const zbar_image_t *image, const char *filebase)
     * }
     */
    public static int zbar_image_write(MemorySegment image, MemorySegment filebase) {
        var mh$ = zbar_image_write.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_image_write", image, filebase);
            }
            return (int)mh$.invokeExact(image, filebase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_image_read {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_POINTER,
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_image_read");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern zbar_image_t *zbar_image_read(char *filename)
     * }
     */
    public static FunctionDescriptor zbar_image_read$descriptor() {
        return zbar_image_read.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern zbar_image_t *zbar_image_read(char *filename)
     * }
     */
    public static MethodHandle zbar_image_read$handle() {
        return zbar_image_read.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern zbar_image_t *zbar_image_read(char *filename)
     * }
     */
    public static MemorySegment zbar_image_read$address() {
        return zbar_image_read.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern zbar_image_t *zbar_image_read(char *filename)
     * }
     */
    public static MemorySegment zbar_image_read(MemorySegment filename) {
        var mh$ = zbar_image_read.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_image_read", filename);
            }
            return (MemorySegment)mh$.invokeExact(filename);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_processor_create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_POINTER,
            zbar.C_INT
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_processor_create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern zbar_processor_t *zbar_processor_create(int threaded)
     * }
     */
    public static FunctionDescriptor zbar_processor_create$descriptor() {
        return zbar_processor_create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern zbar_processor_t *zbar_processor_create(int threaded)
     * }
     */
    public static MethodHandle zbar_processor_create$handle() {
        return zbar_processor_create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern zbar_processor_t *zbar_processor_create(int threaded)
     * }
     */
    public static MemorySegment zbar_processor_create$address() {
        return zbar_processor_create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern zbar_processor_t *zbar_processor_create(int threaded)
     * }
     */
    public static MemorySegment zbar_processor_create(int threaded) {
        var mh$ = zbar_processor_create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_processor_create", threaded);
            }
            return (MemorySegment)mh$.invokeExact(threaded);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_processor_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_processor_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void zbar_processor_destroy(zbar_processor_t *processor)
     * }
     */
    public static FunctionDescriptor zbar_processor_destroy$descriptor() {
        return zbar_processor_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void zbar_processor_destroy(zbar_processor_t *processor)
     * }
     */
    public static MethodHandle zbar_processor_destroy$handle() {
        return zbar_processor_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void zbar_processor_destroy(zbar_processor_t *processor)
     * }
     */
    public static MemorySegment zbar_processor_destroy$address() {
        return zbar_processor_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void zbar_processor_destroy(zbar_processor_t *processor)
     * }
     */
    public static void zbar_processor_destroy(MemorySegment processor) {
        var mh$ = zbar_processor_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_processor_destroy", processor);
            }
            mh$.invokeExact(processor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_processor_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_INT,
            zbar.C_POINTER,
            zbar.C_POINTER,
            zbar.C_INT
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_processor_init");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int zbar_processor_init(zbar_processor_t *processor, const char *video_device, int enable_display)
     * }
     */
    public static FunctionDescriptor zbar_processor_init$descriptor() {
        return zbar_processor_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int zbar_processor_init(zbar_processor_t *processor, const char *video_device, int enable_display)
     * }
     */
    public static MethodHandle zbar_processor_init$handle() {
        return zbar_processor_init.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int zbar_processor_init(zbar_processor_t *processor, const char *video_device, int enable_display)
     * }
     */
    public static MemorySegment zbar_processor_init$address() {
        return zbar_processor_init.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int zbar_processor_init(zbar_processor_t *processor, const char *video_device, int enable_display)
     * }
     */
    public static int zbar_processor_init(MemorySegment processor, MemorySegment video_device, int enable_display) {
        var mh$ = zbar_processor_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_processor_init", processor, video_device, enable_display);
            }
            return (int)mh$.invokeExact(processor, video_device, enable_display);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_processor_request_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_INT,
            zbar.C_POINTER,
            zbar.C_INT,
            zbar.C_INT
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_processor_request_size");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int zbar_processor_request_size(zbar_processor_t *processor, unsigned int width, unsigned int height)
     * }
     */
    public static FunctionDescriptor zbar_processor_request_size$descriptor() {
        return zbar_processor_request_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int zbar_processor_request_size(zbar_processor_t *processor, unsigned int width, unsigned int height)
     * }
     */
    public static MethodHandle zbar_processor_request_size$handle() {
        return zbar_processor_request_size.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int zbar_processor_request_size(zbar_processor_t *processor, unsigned int width, unsigned int height)
     * }
     */
    public static MemorySegment zbar_processor_request_size$address() {
        return zbar_processor_request_size.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int zbar_processor_request_size(zbar_processor_t *processor, unsigned int width, unsigned int height)
     * }
     */
    public static int zbar_processor_request_size(MemorySegment processor, int width, int height) {
        var mh$ = zbar_processor_request_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_processor_request_size", processor, width, height);
            }
            return (int)mh$.invokeExact(processor, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_processor_request_interface {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_INT,
            zbar.C_POINTER,
            zbar.C_INT
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_processor_request_interface");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int zbar_processor_request_interface(zbar_processor_t *processor, int version)
     * }
     */
    public static FunctionDescriptor zbar_processor_request_interface$descriptor() {
        return zbar_processor_request_interface.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int zbar_processor_request_interface(zbar_processor_t *processor, int version)
     * }
     */
    public static MethodHandle zbar_processor_request_interface$handle() {
        return zbar_processor_request_interface.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int zbar_processor_request_interface(zbar_processor_t *processor, int version)
     * }
     */
    public static MemorySegment zbar_processor_request_interface$address() {
        return zbar_processor_request_interface.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int zbar_processor_request_interface(zbar_processor_t *processor, int version)
     * }
     */
    public static int zbar_processor_request_interface(MemorySegment processor, int version) {
        var mh$ = zbar_processor_request_interface.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_processor_request_interface", processor, version);
            }
            return (int)mh$.invokeExact(processor, version);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_processor_request_iomode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_INT,
            zbar.C_POINTER,
            zbar.C_INT
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_processor_request_iomode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int zbar_processor_request_iomode(zbar_processor_t *video, int iomode)
     * }
     */
    public static FunctionDescriptor zbar_processor_request_iomode$descriptor() {
        return zbar_processor_request_iomode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int zbar_processor_request_iomode(zbar_processor_t *video, int iomode)
     * }
     */
    public static MethodHandle zbar_processor_request_iomode$handle() {
        return zbar_processor_request_iomode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int zbar_processor_request_iomode(zbar_processor_t *video, int iomode)
     * }
     */
    public static MemorySegment zbar_processor_request_iomode$address() {
        return zbar_processor_request_iomode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int zbar_processor_request_iomode(zbar_processor_t *video, int iomode)
     * }
     */
    public static int zbar_processor_request_iomode(MemorySegment video, int iomode) {
        var mh$ = zbar_processor_request_iomode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_processor_request_iomode", video, iomode);
            }
            return (int)mh$.invokeExact(video, iomode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_processor_force_format {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_INT,
            zbar.C_POINTER,
            zbar.C_LONG,
            zbar.C_LONG
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_processor_force_format");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int zbar_processor_force_format(zbar_processor_t *processor, unsigned long input_format, unsigned long output_format)
     * }
     */
    public static FunctionDescriptor zbar_processor_force_format$descriptor() {
        return zbar_processor_force_format.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int zbar_processor_force_format(zbar_processor_t *processor, unsigned long input_format, unsigned long output_format)
     * }
     */
    public static MethodHandle zbar_processor_force_format$handle() {
        return zbar_processor_force_format.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int zbar_processor_force_format(zbar_processor_t *processor, unsigned long input_format, unsigned long output_format)
     * }
     */
    public static MemorySegment zbar_processor_force_format$address() {
        return zbar_processor_force_format.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int zbar_processor_force_format(zbar_processor_t *processor, unsigned long input_format, unsigned long output_format)
     * }
     */
    public static int zbar_processor_force_format(MemorySegment processor, long input_format, long output_format) {
        var mh$ = zbar_processor_force_format.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_processor_force_format", processor, input_format, output_format);
            }
            return (int)mh$.invokeExact(processor, input_format, output_format);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_processor_set_data_handler {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_POINTER,
            zbar.C_POINTER,
            zbar.C_POINTER,
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_processor_set_data_handler");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern zbar_image_data_handler_t *zbar_processor_set_data_handler(zbar_processor_t *processor, zbar_image_data_handler_t *handler, const void *userdata)
     * }
     */
    public static FunctionDescriptor zbar_processor_set_data_handler$descriptor() {
        return zbar_processor_set_data_handler.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern zbar_image_data_handler_t *zbar_processor_set_data_handler(zbar_processor_t *processor, zbar_image_data_handler_t *handler, const void *userdata)
     * }
     */
    public static MethodHandle zbar_processor_set_data_handler$handle() {
        return zbar_processor_set_data_handler.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern zbar_image_data_handler_t *zbar_processor_set_data_handler(zbar_processor_t *processor, zbar_image_data_handler_t *handler, const void *userdata)
     * }
     */
    public static MemorySegment zbar_processor_set_data_handler$address() {
        return zbar_processor_set_data_handler.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern zbar_image_data_handler_t *zbar_processor_set_data_handler(zbar_processor_t *processor, zbar_image_data_handler_t *handler, const void *userdata)
     * }
     */
    public static MemorySegment zbar_processor_set_data_handler(MemorySegment processor, MemorySegment handler, MemorySegment userdata) {
        var mh$ = zbar_processor_set_data_handler.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_processor_set_data_handler", processor, handler, userdata);
            }
            return (MemorySegment)mh$.invokeExact(processor, handler, userdata);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_processor_set_userdata {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            zbar.C_POINTER,
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_processor_set_userdata");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void zbar_processor_set_userdata(zbar_processor_t *processor, void *userdata)
     * }
     */
    public static FunctionDescriptor zbar_processor_set_userdata$descriptor() {
        return zbar_processor_set_userdata.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void zbar_processor_set_userdata(zbar_processor_t *processor, void *userdata)
     * }
     */
    public static MethodHandle zbar_processor_set_userdata$handle() {
        return zbar_processor_set_userdata.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void zbar_processor_set_userdata(zbar_processor_t *processor, void *userdata)
     * }
     */
    public static MemorySegment zbar_processor_set_userdata$address() {
        return zbar_processor_set_userdata.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void zbar_processor_set_userdata(zbar_processor_t *processor, void *userdata)
     * }
     */
    public static void zbar_processor_set_userdata(MemorySegment processor, MemorySegment userdata) {
        var mh$ = zbar_processor_set_userdata.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_processor_set_userdata", processor, userdata);
            }
            mh$.invokeExact(processor, userdata);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_processor_get_userdata {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_POINTER,
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_processor_get_userdata");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *zbar_processor_get_userdata(const zbar_processor_t *processor)
     * }
     */
    public static FunctionDescriptor zbar_processor_get_userdata$descriptor() {
        return zbar_processor_get_userdata.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *zbar_processor_get_userdata(const zbar_processor_t *processor)
     * }
     */
    public static MethodHandle zbar_processor_get_userdata$handle() {
        return zbar_processor_get_userdata.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void *zbar_processor_get_userdata(const zbar_processor_t *processor)
     * }
     */
    public static MemorySegment zbar_processor_get_userdata$address() {
        return zbar_processor_get_userdata.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void *zbar_processor_get_userdata(const zbar_processor_t *processor)
     * }
     */
    public static MemorySegment zbar_processor_get_userdata(MemorySegment processor) {
        var mh$ = zbar_processor_get_userdata.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_processor_get_userdata", processor);
            }
            return (MemorySegment)mh$.invokeExact(processor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_processor_set_config {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_INT,
            zbar.C_POINTER,
            zbar.C_INT,
            zbar.C_INT,
            zbar.C_INT
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_processor_set_config");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int zbar_processor_set_config(zbar_processor_t *processor, zbar_symbol_type_t symbology, zbar_config_t config, int value)
     * }
     */
    public static FunctionDescriptor zbar_processor_set_config$descriptor() {
        return zbar_processor_set_config.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int zbar_processor_set_config(zbar_processor_t *processor, zbar_symbol_type_t symbology, zbar_config_t config, int value)
     * }
     */
    public static MethodHandle zbar_processor_set_config$handle() {
        return zbar_processor_set_config.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int zbar_processor_set_config(zbar_processor_t *processor, zbar_symbol_type_t symbology, zbar_config_t config, int value)
     * }
     */
    public static MemorySegment zbar_processor_set_config$address() {
        return zbar_processor_set_config.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int zbar_processor_set_config(zbar_processor_t *processor, zbar_symbol_type_t symbology, zbar_config_t config, int value)
     * }
     */
    public static int zbar_processor_set_config(MemorySegment processor, int symbology, int config, int value) {
        var mh$ = zbar_processor_set_config.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_processor_set_config", processor, symbology, config, value);
            }
            return (int)mh$.invokeExact(processor, symbology, config, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_processor_set_control {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_INT,
            zbar.C_POINTER,
            zbar.C_POINTER,
            zbar.C_INT
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_processor_set_control");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int zbar_processor_set_control(zbar_processor_t *processor, const char *control_name, int value)
     * }
     */
    public static FunctionDescriptor zbar_processor_set_control$descriptor() {
        return zbar_processor_set_control.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int zbar_processor_set_control(zbar_processor_t *processor, const char *control_name, int value)
     * }
     */
    public static MethodHandle zbar_processor_set_control$handle() {
        return zbar_processor_set_control.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int zbar_processor_set_control(zbar_processor_t *processor, const char *control_name, int value)
     * }
     */
    public static MemorySegment zbar_processor_set_control$address() {
        return zbar_processor_set_control.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int zbar_processor_set_control(zbar_processor_t *processor, const char *control_name, int value)
     * }
     */
    public static int zbar_processor_set_control(MemorySegment processor, MemorySegment control_name, int value) {
        var mh$ = zbar_processor_set_control.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_processor_set_control", processor, control_name, value);
            }
            return (int)mh$.invokeExact(processor, control_name, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_processor_get_control {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_INT,
            zbar.C_POINTER,
            zbar.C_POINTER,
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_processor_get_control");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int zbar_processor_get_control(zbar_processor_t *processor, const char *control_name, int *value)
     * }
     */
    public static FunctionDescriptor zbar_processor_get_control$descriptor() {
        return zbar_processor_get_control.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int zbar_processor_get_control(zbar_processor_t *processor, const char *control_name, int *value)
     * }
     */
    public static MethodHandle zbar_processor_get_control$handle() {
        return zbar_processor_get_control.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int zbar_processor_get_control(zbar_processor_t *processor, const char *control_name, int *value)
     * }
     */
    public static MemorySegment zbar_processor_get_control$address() {
        return zbar_processor_get_control.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int zbar_processor_get_control(zbar_processor_t *processor, const char *control_name, int *value)
     * }
     */
    public static int zbar_processor_get_control(MemorySegment processor, MemorySegment control_name, MemorySegment value) {
        var mh$ = zbar_processor_get_control.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_processor_get_control", processor, control_name, value);
            }
            return (int)mh$.invokeExact(processor, control_name, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_processor_is_visible {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_INT,
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_processor_is_visible");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int zbar_processor_is_visible(zbar_processor_t *processor)
     * }
     */
    public static FunctionDescriptor zbar_processor_is_visible$descriptor() {
        return zbar_processor_is_visible.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int zbar_processor_is_visible(zbar_processor_t *processor)
     * }
     */
    public static MethodHandle zbar_processor_is_visible$handle() {
        return zbar_processor_is_visible.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int zbar_processor_is_visible(zbar_processor_t *processor)
     * }
     */
    public static MemorySegment zbar_processor_is_visible$address() {
        return zbar_processor_is_visible.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int zbar_processor_is_visible(zbar_processor_t *processor)
     * }
     */
    public static int zbar_processor_is_visible(MemorySegment processor) {
        var mh$ = zbar_processor_is_visible.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_processor_is_visible", processor);
            }
            return (int)mh$.invokeExact(processor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_processor_set_visible {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_INT,
            zbar.C_POINTER,
            zbar.C_INT
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_processor_set_visible");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int zbar_processor_set_visible(zbar_processor_t *processor, int visible)
     * }
     */
    public static FunctionDescriptor zbar_processor_set_visible$descriptor() {
        return zbar_processor_set_visible.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int zbar_processor_set_visible(zbar_processor_t *processor, int visible)
     * }
     */
    public static MethodHandle zbar_processor_set_visible$handle() {
        return zbar_processor_set_visible.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int zbar_processor_set_visible(zbar_processor_t *processor, int visible)
     * }
     */
    public static MemorySegment zbar_processor_set_visible$address() {
        return zbar_processor_set_visible.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int zbar_processor_set_visible(zbar_processor_t *processor, int visible)
     * }
     */
    public static int zbar_processor_set_visible(MemorySegment processor, int visible) {
        var mh$ = zbar_processor_set_visible.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_processor_set_visible", processor, visible);
            }
            return (int)mh$.invokeExact(processor, visible);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_processor_set_active {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_INT,
            zbar.C_POINTER,
            zbar.C_INT
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_processor_set_active");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int zbar_processor_set_active(zbar_processor_t *processor, int active)
     * }
     */
    public static FunctionDescriptor zbar_processor_set_active$descriptor() {
        return zbar_processor_set_active.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int zbar_processor_set_active(zbar_processor_t *processor, int active)
     * }
     */
    public static MethodHandle zbar_processor_set_active$handle() {
        return zbar_processor_set_active.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int zbar_processor_set_active(zbar_processor_t *processor, int active)
     * }
     */
    public static MemorySegment zbar_processor_set_active$address() {
        return zbar_processor_set_active.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int zbar_processor_set_active(zbar_processor_t *processor, int active)
     * }
     */
    public static int zbar_processor_set_active(MemorySegment processor, int active) {
        var mh$ = zbar_processor_set_active.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_processor_set_active", processor, active);
            }
            return (int)mh$.invokeExact(processor, active);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_processor_get_results {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_POINTER,
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_processor_get_results");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const zbar_symbol_set_t *zbar_processor_get_results(const zbar_processor_t *processor)
     * }
     */
    public static FunctionDescriptor zbar_processor_get_results$descriptor() {
        return zbar_processor_get_results.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const zbar_symbol_set_t *zbar_processor_get_results(const zbar_processor_t *processor)
     * }
     */
    public static MethodHandle zbar_processor_get_results$handle() {
        return zbar_processor_get_results.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const zbar_symbol_set_t *zbar_processor_get_results(const zbar_processor_t *processor)
     * }
     */
    public static MemorySegment zbar_processor_get_results$address() {
        return zbar_processor_get_results.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const zbar_symbol_set_t *zbar_processor_get_results(const zbar_processor_t *processor)
     * }
     */
    public static MemorySegment zbar_processor_get_results(MemorySegment processor) {
        var mh$ = zbar_processor_get_results.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_processor_get_results", processor);
            }
            return (MemorySegment)mh$.invokeExact(processor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_processor_user_wait {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_INT,
            zbar.C_POINTER,
            zbar.C_INT
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_processor_user_wait");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int zbar_processor_user_wait(zbar_processor_t *processor, int timeout)
     * }
     */
    public static FunctionDescriptor zbar_processor_user_wait$descriptor() {
        return zbar_processor_user_wait.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int zbar_processor_user_wait(zbar_processor_t *processor, int timeout)
     * }
     */
    public static MethodHandle zbar_processor_user_wait$handle() {
        return zbar_processor_user_wait.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int zbar_processor_user_wait(zbar_processor_t *processor, int timeout)
     * }
     */
    public static MemorySegment zbar_processor_user_wait$address() {
        return zbar_processor_user_wait.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int zbar_processor_user_wait(zbar_processor_t *processor, int timeout)
     * }
     */
    public static int zbar_processor_user_wait(MemorySegment processor, int timeout) {
        var mh$ = zbar_processor_user_wait.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_processor_user_wait", processor, timeout);
            }
            return (int)mh$.invokeExact(processor, timeout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_process_one {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_INT,
            zbar.C_POINTER,
            zbar.C_INT
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_process_one");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int zbar_process_one(zbar_processor_t *processor, int timeout)
     * }
     */
    public static FunctionDescriptor zbar_process_one$descriptor() {
        return zbar_process_one.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int zbar_process_one(zbar_processor_t *processor, int timeout)
     * }
     */
    public static MethodHandle zbar_process_one$handle() {
        return zbar_process_one.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int zbar_process_one(zbar_processor_t *processor, int timeout)
     * }
     */
    public static MemorySegment zbar_process_one$address() {
        return zbar_process_one.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int zbar_process_one(zbar_processor_t *processor, int timeout)
     * }
     */
    public static int zbar_process_one(MemorySegment processor, int timeout) {
        var mh$ = zbar_process_one.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_process_one", processor, timeout);
            }
            return (int)mh$.invokeExact(processor, timeout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_process_image {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_INT,
            zbar.C_POINTER,
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_process_image");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int zbar_process_image(zbar_processor_t *processor, zbar_image_t *image)
     * }
     */
    public static FunctionDescriptor zbar_process_image$descriptor() {
        return zbar_process_image.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int zbar_process_image(zbar_processor_t *processor, zbar_image_t *image)
     * }
     */
    public static MethodHandle zbar_process_image$handle() {
        return zbar_process_image.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int zbar_process_image(zbar_processor_t *processor, zbar_image_t *image)
     * }
     */
    public static MemorySegment zbar_process_image$address() {
        return zbar_process_image.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int zbar_process_image(zbar_processor_t *processor, zbar_image_t *image)
     * }
     */
    public static int zbar_process_image(MemorySegment processor, MemorySegment image) {
        var mh$ = zbar_process_image.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_process_image", processor, image);
            }
            return (int)mh$.invokeExact(processor, image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_processor_request_dbus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_INT,
            zbar.C_POINTER,
            zbar.C_INT
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_processor_request_dbus");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int zbar_processor_request_dbus(zbar_processor_t *proc, int req_dbus_enabled)
     * }
     */
    public static FunctionDescriptor zbar_processor_request_dbus$descriptor() {
        return zbar_processor_request_dbus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int zbar_processor_request_dbus(zbar_processor_t *proc, int req_dbus_enabled)
     * }
     */
    public static MethodHandle zbar_processor_request_dbus$handle() {
        return zbar_processor_request_dbus.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int zbar_processor_request_dbus(zbar_processor_t *proc, int req_dbus_enabled)
     * }
     */
    public static MemorySegment zbar_processor_request_dbus$address() {
        return zbar_processor_request_dbus.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int zbar_processor_request_dbus(zbar_processor_t *proc, int req_dbus_enabled)
     * }
     */
    public static int zbar_processor_request_dbus(MemorySegment proc, int req_dbus_enabled) {
        var mh$ = zbar_processor_request_dbus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_processor_request_dbus", proc, req_dbus_enabled);
            }
            return (int)mh$.invokeExact(proc, req_dbus_enabled);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_video_create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_POINTER    );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_video_create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern zbar_video_t *zbar_video_create()
     * }
     */
    public static FunctionDescriptor zbar_video_create$descriptor() {
        return zbar_video_create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern zbar_video_t *zbar_video_create()
     * }
     */
    public static MethodHandle zbar_video_create$handle() {
        return zbar_video_create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern zbar_video_t *zbar_video_create()
     * }
     */
    public static MemorySegment zbar_video_create$address() {
        return zbar_video_create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern zbar_video_t *zbar_video_create()
     * }
     */
    public static MemorySegment zbar_video_create() {
        var mh$ = zbar_video_create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_video_create");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_video_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_video_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void zbar_video_destroy(zbar_video_t *video)
     * }
     */
    public static FunctionDescriptor zbar_video_destroy$descriptor() {
        return zbar_video_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void zbar_video_destroy(zbar_video_t *video)
     * }
     */
    public static MethodHandle zbar_video_destroy$handle() {
        return zbar_video_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void zbar_video_destroy(zbar_video_t *video)
     * }
     */
    public static MemorySegment zbar_video_destroy$address() {
        return zbar_video_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void zbar_video_destroy(zbar_video_t *video)
     * }
     */
    public static void zbar_video_destroy(MemorySegment video) {
        var mh$ = zbar_video_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_video_destroy", video);
            }
            mh$.invokeExact(video);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_video_open {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_INT,
            zbar.C_POINTER,
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_video_open");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int zbar_video_open(zbar_video_t *video, const char *device)
     * }
     */
    public static FunctionDescriptor zbar_video_open$descriptor() {
        return zbar_video_open.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int zbar_video_open(zbar_video_t *video, const char *device)
     * }
     */
    public static MethodHandle zbar_video_open$handle() {
        return zbar_video_open.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int zbar_video_open(zbar_video_t *video, const char *device)
     * }
     */
    public static MemorySegment zbar_video_open$address() {
        return zbar_video_open.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int zbar_video_open(zbar_video_t *video, const char *device)
     * }
     */
    public static int zbar_video_open(MemorySegment video, MemorySegment device) {
        var mh$ = zbar_video_open.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_video_open", video, device);
            }
            return (int)mh$.invokeExact(video, device);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_video_get_fd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_INT,
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_video_get_fd");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int zbar_video_get_fd(const zbar_video_t *video)
     * }
     */
    public static FunctionDescriptor zbar_video_get_fd$descriptor() {
        return zbar_video_get_fd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int zbar_video_get_fd(const zbar_video_t *video)
     * }
     */
    public static MethodHandle zbar_video_get_fd$handle() {
        return zbar_video_get_fd.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int zbar_video_get_fd(const zbar_video_t *video)
     * }
     */
    public static MemorySegment zbar_video_get_fd$address() {
        return zbar_video_get_fd.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int zbar_video_get_fd(const zbar_video_t *video)
     * }
     */
    public static int zbar_video_get_fd(MemorySegment video) {
        var mh$ = zbar_video_get_fd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_video_get_fd", video);
            }
            return (int)mh$.invokeExact(video);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_video_request_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_INT,
            zbar.C_POINTER,
            zbar.C_INT,
            zbar.C_INT
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_video_request_size");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int zbar_video_request_size(zbar_video_t *video, unsigned int width, unsigned int height)
     * }
     */
    public static FunctionDescriptor zbar_video_request_size$descriptor() {
        return zbar_video_request_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int zbar_video_request_size(zbar_video_t *video, unsigned int width, unsigned int height)
     * }
     */
    public static MethodHandle zbar_video_request_size$handle() {
        return zbar_video_request_size.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int zbar_video_request_size(zbar_video_t *video, unsigned int width, unsigned int height)
     * }
     */
    public static MemorySegment zbar_video_request_size$address() {
        return zbar_video_request_size.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int zbar_video_request_size(zbar_video_t *video, unsigned int width, unsigned int height)
     * }
     */
    public static int zbar_video_request_size(MemorySegment video, int width, int height) {
        var mh$ = zbar_video_request_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_video_request_size", video, width, height);
            }
            return (int)mh$.invokeExact(video, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_video_request_interface {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_INT,
            zbar.C_POINTER,
            zbar.C_INT
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_video_request_interface");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int zbar_video_request_interface(zbar_video_t *video, int version)
     * }
     */
    public static FunctionDescriptor zbar_video_request_interface$descriptor() {
        return zbar_video_request_interface.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int zbar_video_request_interface(zbar_video_t *video, int version)
     * }
     */
    public static MethodHandle zbar_video_request_interface$handle() {
        return zbar_video_request_interface.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int zbar_video_request_interface(zbar_video_t *video, int version)
     * }
     */
    public static MemorySegment zbar_video_request_interface$address() {
        return zbar_video_request_interface.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int zbar_video_request_interface(zbar_video_t *video, int version)
     * }
     */
    public static int zbar_video_request_interface(MemorySegment video, int version) {
        var mh$ = zbar_video_request_interface.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_video_request_interface", video, version);
            }
            return (int)mh$.invokeExact(video, version);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_video_request_iomode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_INT,
            zbar.C_POINTER,
            zbar.C_INT
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_video_request_iomode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int zbar_video_request_iomode(zbar_video_t *video, int iomode)
     * }
     */
    public static FunctionDescriptor zbar_video_request_iomode$descriptor() {
        return zbar_video_request_iomode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int zbar_video_request_iomode(zbar_video_t *video, int iomode)
     * }
     */
    public static MethodHandle zbar_video_request_iomode$handle() {
        return zbar_video_request_iomode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int zbar_video_request_iomode(zbar_video_t *video, int iomode)
     * }
     */
    public static MemorySegment zbar_video_request_iomode$address() {
        return zbar_video_request_iomode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int zbar_video_request_iomode(zbar_video_t *video, int iomode)
     * }
     */
    public static int zbar_video_request_iomode(MemorySegment video, int iomode) {
        var mh$ = zbar_video_request_iomode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_video_request_iomode", video, iomode);
            }
            return (int)mh$.invokeExact(video, iomode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_video_get_width {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_INT,
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_video_get_width");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int zbar_video_get_width(const zbar_video_t *video)
     * }
     */
    public static FunctionDescriptor zbar_video_get_width$descriptor() {
        return zbar_video_get_width.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int zbar_video_get_width(const zbar_video_t *video)
     * }
     */
    public static MethodHandle zbar_video_get_width$handle() {
        return zbar_video_get_width.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int zbar_video_get_width(const zbar_video_t *video)
     * }
     */
    public static MemorySegment zbar_video_get_width$address() {
        return zbar_video_get_width.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int zbar_video_get_width(const zbar_video_t *video)
     * }
     */
    public static int zbar_video_get_width(MemorySegment video) {
        var mh$ = zbar_video_get_width.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_video_get_width", video);
            }
            return (int)mh$.invokeExact(video);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_video_get_height {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_INT,
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_video_get_height");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int zbar_video_get_height(const zbar_video_t *video)
     * }
     */
    public static FunctionDescriptor zbar_video_get_height$descriptor() {
        return zbar_video_get_height.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int zbar_video_get_height(const zbar_video_t *video)
     * }
     */
    public static MethodHandle zbar_video_get_height$handle() {
        return zbar_video_get_height.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int zbar_video_get_height(const zbar_video_t *video)
     * }
     */
    public static MemorySegment zbar_video_get_height$address() {
        return zbar_video_get_height.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int zbar_video_get_height(const zbar_video_t *video)
     * }
     */
    public static int zbar_video_get_height(MemorySegment video) {
        var mh$ = zbar_video_get_height.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_video_get_height", video);
            }
            return (int)mh$.invokeExact(video);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_video_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_INT,
            zbar.C_POINTER,
            zbar.C_LONG
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_video_init");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int zbar_video_init(zbar_video_t *video, unsigned long format)
     * }
     */
    public static FunctionDescriptor zbar_video_init$descriptor() {
        return zbar_video_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int zbar_video_init(zbar_video_t *video, unsigned long format)
     * }
     */
    public static MethodHandle zbar_video_init$handle() {
        return zbar_video_init.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int zbar_video_init(zbar_video_t *video, unsigned long format)
     * }
     */
    public static MemorySegment zbar_video_init$address() {
        return zbar_video_init.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int zbar_video_init(zbar_video_t *video, unsigned long format)
     * }
     */
    public static int zbar_video_init(MemorySegment video, long format) {
        var mh$ = zbar_video_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_video_init", video, format);
            }
            return (int)mh$.invokeExact(video, format);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_video_enable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_INT,
            zbar.C_POINTER,
            zbar.C_INT
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_video_enable");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int zbar_video_enable(zbar_video_t *video, int enable)
     * }
     */
    public static FunctionDescriptor zbar_video_enable$descriptor() {
        return zbar_video_enable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int zbar_video_enable(zbar_video_t *video, int enable)
     * }
     */
    public static MethodHandle zbar_video_enable$handle() {
        return zbar_video_enable.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int zbar_video_enable(zbar_video_t *video, int enable)
     * }
     */
    public static MemorySegment zbar_video_enable$address() {
        return zbar_video_enable.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int zbar_video_enable(zbar_video_t *video, int enable)
     * }
     */
    public static int zbar_video_enable(MemorySegment video, int enable) {
        var mh$ = zbar_video_enable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_video_enable", video, enable);
            }
            return (int)mh$.invokeExact(video, enable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_video_next_image {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_POINTER,
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_video_next_image");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern zbar_image_t *zbar_video_next_image(zbar_video_t *video)
     * }
     */
    public static FunctionDescriptor zbar_video_next_image$descriptor() {
        return zbar_video_next_image.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern zbar_image_t *zbar_video_next_image(zbar_video_t *video)
     * }
     */
    public static MethodHandle zbar_video_next_image$handle() {
        return zbar_video_next_image.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern zbar_image_t *zbar_video_next_image(zbar_video_t *video)
     * }
     */
    public static MemorySegment zbar_video_next_image$address() {
        return zbar_video_next_image.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern zbar_image_t *zbar_video_next_image(zbar_video_t *video)
     * }
     */
    public static MemorySegment zbar_video_next_image(MemorySegment video) {
        var mh$ = zbar_video_next_image.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_video_next_image", video);
            }
            return (MemorySegment)mh$.invokeExact(video);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_video_set_control {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_INT,
            zbar.C_POINTER,
            zbar.C_POINTER,
            zbar.C_INT
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_video_set_control");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int zbar_video_set_control(zbar_video_t *video, const char *control_name, int value)
     * }
     */
    public static FunctionDescriptor zbar_video_set_control$descriptor() {
        return zbar_video_set_control.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int zbar_video_set_control(zbar_video_t *video, const char *control_name, int value)
     * }
     */
    public static MethodHandle zbar_video_set_control$handle() {
        return zbar_video_set_control.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int zbar_video_set_control(zbar_video_t *video, const char *control_name, int value)
     * }
     */
    public static MemorySegment zbar_video_set_control$address() {
        return zbar_video_set_control.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int zbar_video_set_control(zbar_video_t *video, const char *control_name, int value)
     * }
     */
    public static int zbar_video_set_control(MemorySegment video, MemorySegment control_name, int value) {
        var mh$ = zbar_video_set_control.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_video_set_control", video, control_name, value);
            }
            return (int)mh$.invokeExact(video, control_name, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_video_get_control {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_INT,
            zbar.C_POINTER,
            zbar.C_POINTER,
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_video_get_control");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int zbar_video_get_control(zbar_video_t *video, const char *control_name, int *value)
     * }
     */
    public static FunctionDescriptor zbar_video_get_control$descriptor() {
        return zbar_video_get_control.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int zbar_video_get_control(zbar_video_t *video, const char *control_name, int *value)
     * }
     */
    public static MethodHandle zbar_video_get_control$handle() {
        return zbar_video_get_control.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int zbar_video_get_control(zbar_video_t *video, const char *control_name, int *value)
     * }
     */
    public static MemorySegment zbar_video_get_control$address() {
        return zbar_video_get_control.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int zbar_video_get_control(zbar_video_t *video, const char *control_name, int *value)
     * }
     */
    public static int zbar_video_get_control(MemorySegment video, MemorySegment control_name, MemorySegment value) {
        var mh$ = zbar_video_get_control.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_video_get_control", video, control_name, value);
            }
            return (int)mh$.invokeExact(video, control_name, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_video_get_controls {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_POINTER,
            zbar.C_POINTER,
            zbar.C_INT
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_video_get_controls");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct video_controls_s *zbar_video_get_controls(const zbar_video_t *video, int index)
     * }
     */
    public static FunctionDescriptor zbar_video_get_controls$descriptor() {
        return zbar_video_get_controls.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct video_controls_s *zbar_video_get_controls(const zbar_video_t *video, int index)
     * }
     */
    public static MethodHandle zbar_video_get_controls$handle() {
        return zbar_video_get_controls.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct video_controls_s *zbar_video_get_controls(const zbar_video_t *video, int index)
     * }
     */
    public static MemorySegment zbar_video_get_controls$address() {
        return zbar_video_get_controls.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct video_controls_s *zbar_video_get_controls(const zbar_video_t *video, int index)
     * }
     */
    public static MemorySegment zbar_video_get_controls(MemorySegment video, int index) {
        var mh$ = zbar_video_get_controls.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_video_get_controls", video, index);
            }
            return (MemorySegment)mh$.invokeExact(video, index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_video_get_resolutions {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_POINTER,
            zbar.C_POINTER,
            zbar.C_INT
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_video_get_resolutions");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct video_resolution_s *zbar_video_get_resolutions(const zbar_video_t *vdo, int index)
     * }
     */
    public static FunctionDescriptor zbar_video_get_resolutions$descriptor() {
        return zbar_video_get_resolutions.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct video_resolution_s *zbar_video_get_resolutions(const zbar_video_t *vdo, int index)
     * }
     */
    public static MethodHandle zbar_video_get_resolutions$handle() {
        return zbar_video_get_resolutions.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct video_resolution_s *zbar_video_get_resolutions(const zbar_video_t *vdo, int index)
     * }
     */
    public static MemorySegment zbar_video_get_resolutions$address() {
        return zbar_video_get_resolutions.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct video_resolution_s *zbar_video_get_resolutions(const zbar_video_t *vdo, int index)
     * }
     */
    public static MemorySegment zbar_video_get_resolutions(MemorySegment vdo, int index) {
        var mh$ = zbar_video_get_resolutions.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_video_get_resolutions", vdo, index);
            }
            return (MemorySegment)mh$.invokeExact(vdo, index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_window_create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_POINTER    );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_window_create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern zbar_window_t *zbar_window_create()
     * }
     */
    public static FunctionDescriptor zbar_window_create$descriptor() {
        return zbar_window_create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern zbar_window_t *zbar_window_create()
     * }
     */
    public static MethodHandle zbar_window_create$handle() {
        return zbar_window_create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern zbar_window_t *zbar_window_create()
     * }
     */
    public static MemorySegment zbar_window_create$address() {
        return zbar_window_create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern zbar_window_t *zbar_window_create()
     * }
     */
    public static MemorySegment zbar_window_create() {
        var mh$ = zbar_window_create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_window_create");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_window_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_window_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void zbar_window_destroy(zbar_window_t *window)
     * }
     */
    public static FunctionDescriptor zbar_window_destroy$descriptor() {
        return zbar_window_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void zbar_window_destroy(zbar_window_t *window)
     * }
     */
    public static MethodHandle zbar_window_destroy$handle() {
        return zbar_window_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void zbar_window_destroy(zbar_window_t *window)
     * }
     */
    public static MemorySegment zbar_window_destroy$address() {
        return zbar_window_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void zbar_window_destroy(zbar_window_t *window)
     * }
     */
    public static void zbar_window_destroy(MemorySegment window) {
        var mh$ = zbar_window_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_window_destroy", window);
            }
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_window_attach {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_INT,
            zbar.C_POINTER,
            zbar.C_POINTER,
            zbar.C_LONG
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_window_attach");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int zbar_window_attach(zbar_window_t *window, void *x11_display_w32_hwnd, unsigned long x11_drawable)
     * }
     */
    public static FunctionDescriptor zbar_window_attach$descriptor() {
        return zbar_window_attach.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int zbar_window_attach(zbar_window_t *window, void *x11_display_w32_hwnd, unsigned long x11_drawable)
     * }
     */
    public static MethodHandle zbar_window_attach$handle() {
        return zbar_window_attach.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int zbar_window_attach(zbar_window_t *window, void *x11_display_w32_hwnd, unsigned long x11_drawable)
     * }
     */
    public static MemorySegment zbar_window_attach$address() {
        return zbar_window_attach.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int zbar_window_attach(zbar_window_t *window, void *x11_display_w32_hwnd, unsigned long x11_drawable)
     * }
     */
    public static int zbar_window_attach(MemorySegment window, MemorySegment x11_display_w32_hwnd, long x11_drawable) {
        var mh$ = zbar_window_attach.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_window_attach", window, x11_display_w32_hwnd, x11_drawable);
            }
            return (int)mh$.invokeExact(window, x11_display_w32_hwnd, x11_drawable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_window_set_overlay {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            zbar.C_POINTER,
            zbar.C_INT
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_window_set_overlay");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void zbar_window_set_overlay(zbar_window_t *window, int level)
     * }
     */
    public static FunctionDescriptor zbar_window_set_overlay$descriptor() {
        return zbar_window_set_overlay.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void zbar_window_set_overlay(zbar_window_t *window, int level)
     * }
     */
    public static MethodHandle zbar_window_set_overlay$handle() {
        return zbar_window_set_overlay.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void zbar_window_set_overlay(zbar_window_t *window, int level)
     * }
     */
    public static MemorySegment zbar_window_set_overlay$address() {
        return zbar_window_set_overlay.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void zbar_window_set_overlay(zbar_window_t *window, int level)
     * }
     */
    public static void zbar_window_set_overlay(MemorySegment window, int level) {
        var mh$ = zbar_window_set_overlay.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_window_set_overlay", window, level);
            }
            mh$.invokeExact(window, level);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_window_get_overlay {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_INT,
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_window_get_overlay");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int zbar_window_get_overlay(const zbar_window_t *window)
     * }
     */
    public static FunctionDescriptor zbar_window_get_overlay$descriptor() {
        return zbar_window_get_overlay.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int zbar_window_get_overlay(const zbar_window_t *window)
     * }
     */
    public static MethodHandle zbar_window_get_overlay$handle() {
        return zbar_window_get_overlay.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int zbar_window_get_overlay(const zbar_window_t *window)
     * }
     */
    public static MemorySegment zbar_window_get_overlay$address() {
        return zbar_window_get_overlay.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int zbar_window_get_overlay(const zbar_window_t *window)
     * }
     */
    public static int zbar_window_get_overlay(MemorySegment window) {
        var mh$ = zbar_window_get_overlay.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_window_get_overlay", window);
            }
            return (int)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_window_draw {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_INT,
            zbar.C_POINTER,
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_window_draw");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int zbar_window_draw(zbar_window_t *window, zbar_image_t *image)
     * }
     */
    public static FunctionDescriptor zbar_window_draw$descriptor() {
        return zbar_window_draw.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int zbar_window_draw(zbar_window_t *window, zbar_image_t *image)
     * }
     */
    public static MethodHandle zbar_window_draw$handle() {
        return zbar_window_draw.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int zbar_window_draw(zbar_window_t *window, zbar_image_t *image)
     * }
     */
    public static MemorySegment zbar_window_draw$address() {
        return zbar_window_draw.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int zbar_window_draw(zbar_window_t *window, zbar_image_t *image)
     * }
     */
    public static int zbar_window_draw(MemorySegment window, MemorySegment image) {
        var mh$ = zbar_window_draw.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_window_draw", window, image);
            }
            return (int)mh$.invokeExact(window, image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_window_redraw {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_INT,
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_window_redraw");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int zbar_window_redraw(zbar_window_t *window)
     * }
     */
    public static FunctionDescriptor zbar_window_redraw$descriptor() {
        return zbar_window_redraw.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int zbar_window_redraw(zbar_window_t *window)
     * }
     */
    public static MethodHandle zbar_window_redraw$handle() {
        return zbar_window_redraw.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int zbar_window_redraw(zbar_window_t *window)
     * }
     */
    public static MemorySegment zbar_window_redraw$address() {
        return zbar_window_redraw.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int zbar_window_redraw(zbar_window_t *window)
     * }
     */
    public static int zbar_window_redraw(MemorySegment window) {
        var mh$ = zbar_window_redraw.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_window_redraw", window);
            }
            return (int)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_window_resize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_INT,
            zbar.C_POINTER,
            zbar.C_INT,
            zbar.C_INT
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_window_resize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int zbar_window_resize(zbar_window_t *window, unsigned int width, unsigned int height)
     * }
     */
    public static FunctionDescriptor zbar_window_resize$descriptor() {
        return zbar_window_resize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int zbar_window_resize(zbar_window_t *window, unsigned int width, unsigned int height)
     * }
     */
    public static MethodHandle zbar_window_resize$handle() {
        return zbar_window_resize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int zbar_window_resize(zbar_window_t *window, unsigned int width, unsigned int height)
     * }
     */
    public static MemorySegment zbar_window_resize$address() {
        return zbar_window_resize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int zbar_window_resize(zbar_window_t *window, unsigned int width, unsigned int height)
     * }
     */
    public static int zbar_window_resize(MemorySegment window, int width, int height) {
        var mh$ = zbar_window_resize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_window_resize", window, width, height);
            }
            return (int)mh$.invokeExact(window, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_negotiate_format {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_INT,
            zbar.C_POINTER,
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_negotiate_format");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int zbar_negotiate_format(zbar_video_t *video, zbar_window_t *window)
     * }
     */
    public static FunctionDescriptor zbar_negotiate_format$descriptor() {
        return zbar_negotiate_format.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int zbar_negotiate_format(zbar_video_t *video, zbar_window_t *window)
     * }
     */
    public static MethodHandle zbar_negotiate_format$handle() {
        return zbar_negotiate_format.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int zbar_negotiate_format(zbar_video_t *video, zbar_window_t *window)
     * }
     */
    public static MemorySegment zbar_negotiate_format$address() {
        return zbar_negotiate_format.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int zbar_negotiate_format(zbar_video_t *video, zbar_window_t *window)
     * }
     */
    public static int zbar_negotiate_format(MemorySegment video, MemorySegment window) {
        var mh$ = zbar_negotiate_format.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_negotiate_format", video, window);
            }
            return (int)mh$.invokeExact(video, window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_image_scanner_create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_POINTER    );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_image_scanner_create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern zbar_image_scanner_t *zbar_image_scanner_create()
     * }
     */
    public static FunctionDescriptor zbar_image_scanner_create$descriptor() {
        return zbar_image_scanner_create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern zbar_image_scanner_t *zbar_image_scanner_create()
     * }
     */
    public static MethodHandle zbar_image_scanner_create$handle() {
        return zbar_image_scanner_create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern zbar_image_scanner_t *zbar_image_scanner_create()
     * }
     */
    public static MemorySegment zbar_image_scanner_create$address() {
        return zbar_image_scanner_create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern zbar_image_scanner_t *zbar_image_scanner_create()
     * }
     */
    public static MemorySegment zbar_image_scanner_create() {
        var mh$ = zbar_image_scanner_create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_image_scanner_create");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_image_scanner_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_image_scanner_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void zbar_image_scanner_destroy(zbar_image_scanner_t *scanner)
     * }
     */
    public static FunctionDescriptor zbar_image_scanner_destroy$descriptor() {
        return zbar_image_scanner_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void zbar_image_scanner_destroy(zbar_image_scanner_t *scanner)
     * }
     */
    public static MethodHandle zbar_image_scanner_destroy$handle() {
        return zbar_image_scanner_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void zbar_image_scanner_destroy(zbar_image_scanner_t *scanner)
     * }
     */
    public static MemorySegment zbar_image_scanner_destroy$address() {
        return zbar_image_scanner_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void zbar_image_scanner_destroy(zbar_image_scanner_t *scanner)
     * }
     */
    public static void zbar_image_scanner_destroy(MemorySegment scanner) {
        var mh$ = zbar_image_scanner_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_image_scanner_destroy", scanner);
            }
            mh$.invokeExact(scanner);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_image_scanner_set_data_handler {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_POINTER,
            zbar.C_POINTER,
            zbar.C_POINTER,
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_image_scanner_set_data_handler");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern zbar_image_data_handler_t *zbar_image_scanner_set_data_handler(zbar_image_scanner_t *scanner, zbar_image_data_handler_t *handler, const void *userdata)
     * }
     */
    public static FunctionDescriptor zbar_image_scanner_set_data_handler$descriptor() {
        return zbar_image_scanner_set_data_handler.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern zbar_image_data_handler_t *zbar_image_scanner_set_data_handler(zbar_image_scanner_t *scanner, zbar_image_data_handler_t *handler, const void *userdata)
     * }
     */
    public static MethodHandle zbar_image_scanner_set_data_handler$handle() {
        return zbar_image_scanner_set_data_handler.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern zbar_image_data_handler_t *zbar_image_scanner_set_data_handler(zbar_image_scanner_t *scanner, zbar_image_data_handler_t *handler, const void *userdata)
     * }
     */
    public static MemorySegment zbar_image_scanner_set_data_handler$address() {
        return zbar_image_scanner_set_data_handler.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern zbar_image_data_handler_t *zbar_image_scanner_set_data_handler(zbar_image_scanner_t *scanner, zbar_image_data_handler_t *handler, const void *userdata)
     * }
     */
    public static MemorySegment zbar_image_scanner_set_data_handler(MemorySegment scanner, MemorySegment handler, MemorySegment userdata) {
        var mh$ = zbar_image_scanner_set_data_handler.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_image_scanner_set_data_handler", scanner, handler, userdata);
            }
            return (MemorySegment)mh$.invokeExact(scanner, handler, userdata);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_image_scanner_request_dbus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_INT,
            zbar.C_POINTER,
            zbar.C_INT
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_image_scanner_request_dbus");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int zbar_image_scanner_request_dbus(zbar_image_scanner_t *scanner, int req_dbus_enabled)
     * }
     */
    public static FunctionDescriptor zbar_image_scanner_request_dbus$descriptor() {
        return zbar_image_scanner_request_dbus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int zbar_image_scanner_request_dbus(zbar_image_scanner_t *scanner, int req_dbus_enabled)
     * }
     */
    public static MethodHandle zbar_image_scanner_request_dbus$handle() {
        return zbar_image_scanner_request_dbus.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int zbar_image_scanner_request_dbus(zbar_image_scanner_t *scanner, int req_dbus_enabled)
     * }
     */
    public static MemorySegment zbar_image_scanner_request_dbus$address() {
        return zbar_image_scanner_request_dbus.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int zbar_image_scanner_request_dbus(zbar_image_scanner_t *scanner, int req_dbus_enabled)
     * }
     */
    public static int zbar_image_scanner_request_dbus(MemorySegment scanner, int req_dbus_enabled) {
        var mh$ = zbar_image_scanner_request_dbus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_image_scanner_request_dbus", scanner, req_dbus_enabled);
            }
            return (int)mh$.invokeExact(scanner, req_dbus_enabled);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_image_scanner_set_config {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_INT,
            zbar.C_POINTER,
            zbar.C_INT,
            zbar.C_INT,
            zbar.C_INT
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_image_scanner_set_config");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int zbar_image_scanner_set_config(zbar_image_scanner_t *scanner, zbar_symbol_type_t symbology, zbar_config_t config, int value)
     * }
     */
    public static FunctionDescriptor zbar_image_scanner_set_config$descriptor() {
        return zbar_image_scanner_set_config.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int zbar_image_scanner_set_config(zbar_image_scanner_t *scanner, zbar_symbol_type_t symbology, zbar_config_t config, int value)
     * }
     */
    public static MethodHandle zbar_image_scanner_set_config$handle() {
        return zbar_image_scanner_set_config.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int zbar_image_scanner_set_config(zbar_image_scanner_t *scanner, zbar_symbol_type_t symbology, zbar_config_t config, int value)
     * }
     */
    public static MemorySegment zbar_image_scanner_set_config$address() {
        return zbar_image_scanner_set_config.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int zbar_image_scanner_set_config(zbar_image_scanner_t *scanner, zbar_symbol_type_t symbology, zbar_config_t config, int value)
     * }
     */
    public static int zbar_image_scanner_set_config(MemorySegment scanner, int symbology, int config, int value) {
        var mh$ = zbar_image_scanner_set_config.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_image_scanner_set_config", scanner, symbology, config, value);
            }
            return (int)mh$.invokeExact(scanner, symbology, config, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_image_scanner_get_config {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_INT,
            zbar.C_POINTER,
            zbar.C_INT,
            zbar.C_INT,
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_image_scanner_get_config");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int zbar_image_scanner_get_config(zbar_image_scanner_t *scanner, zbar_symbol_type_t symbology, zbar_config_t config, int *value)
     * }
     */
    public static FunctionDescriptor zbar_image_scanner_get_config$descriptor() {
        return zbar_image_scanner_get_config.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int zbar_image_scanner_get_config(zbar_image_scanner_t *scanner, zbar_symbol_type_t symbology, zbar_config_t config, int *value)
     * }
     */
    public static MethodHandle zbar_image_scanner_get_config$handle() {
        return zbar_image_scanner_get_config.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int zbar_image_scanner_get_config(zbar_image_scanner_t *scanner, zbar_symbol_type_t symbology, zbar_config_t config, int *value)
     * }
     */
    public static MemorySegment zbar_image_scanner_get_config$address() {
        return zbar_image_scanner_get_config.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int zbar_image_scanner_get_config(zbar_image_scanner_t *scanner, zbar_symbol_type_t symbology, zbar_config_t config, int *value)
     * }
     */
    public static int zbar_image_scanner_get_config(MemorySegment scanner, int symbology, int config, MemorySegment value) {
        var mh$ = zbar_image_scanner_get_config.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_image_scanner_get_config", scanner, symbology, config, value);
            }
            return (int)mh$.invokeExact(scanner, symbology, config, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_image_scanner_enable_cache {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            zbar.C_POINTER,
            zbar.C_INT
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_image_scanner_enable_cache");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void zbar_image_scanner_enable_cache(zbar_image_scanner_t *scanner, int enable)
     * }
     */
    public static FunctionDescriptor zbar_image_scanner_enable_cache$descriptor() {
        return zbar_image_scanner_enable_cache.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void zbar_image_scanner_enable_cache(zbar_image_scanner_t *scanner, int enable)
     * }
     */
    public static MethodHandle zbar_image_scanner_enable_cache$handle() {
        return zbar_image_scanner_enable_cache.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void zbar_image_scanner_enable_cache(zbar_image_scanner_t *scanner, int enable)
     * }
     */
    public static MemorySegment zbar_image_scanner_enable_cache$address() {
        return zbar_image_scanner_enable_cache.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void zbar_image_scanner_enable_cache(zbar_image_scanner_t *scanner, int enable)
     * }
     */
    public static void zbar_image_scanner_enable_cache(MemorySegment scanner, int enable) {
        var mh$ = zbar_image_scanner_enable_cache.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_image_scanner_enable_cache", scanner, enable);
            }
            mh$.invokeExact(scanner, enable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_image_scanner_recycle_image {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            zbar.C_POINTER,
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_image_scanner_recycle_image");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void zbar_image_scanner_recycle_image(zbar_image_scanner_t *scanner, zbar_image_t *image)
     * }
     */
    public static FunctionDescriptor zbar_image_scanner_recycle_image$descriptor() {
        return zbar_image_scanner_recycle_image.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void zbar_image_scanner_recycle_image(zbar_image_scanner_t *scanner, zbar_image_t *image)
     * }
     */
    public static MethodHandle zbar_image_scanner_recycle_image$handle() {
        return zbar_image_scanner_recycle_image.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void zbar_image_scanner_recycle_image(zbar_image_scanner_t *scanner, zbar_image_t *image)
     * }
     */
    public static MemorySegment zbar_image_scanner_recycle_image$address() {
        return zbar_image_scanner_recycle_image.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void zbar_image_scanner_recycle_image(zbar_image_scanner_t *scanner, zbar_image_t *image)
     * }
     */
    public static void zbar_image_scanner_recycle_image(MemorySegment scanner, MemorySegment image) {
        var mh$ = zbar_image_scanner_recycle_image.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_image_scanner_recycle_image", scanner, image);
            }
            mh$.invokeExact(scanner, image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_image_scanner_get_results {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_POINTER,
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_image_scanner_get_results");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const zbar_symbol_set_t *zbar_image_scanner_get_results(const zbar_image_scanner_t *scanner)
     * }
     */
    public static FunctionDescriptor zbar_image_scanner_get_results$descriptor() {
        return zbar_image_scanner_get_results.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const zbar_symbol_set_t *zbar_image_scanner_get_results(const zbar_image_scanner_t *scanner)
     * }
     */
    public static MethodHandle zbar_image_scanner_get_results$handle() {
        return zbar_image_scanner_get_results.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const zbar_symbol_set_t *zbar_image_scanner_get_results(const zbar_image_scanner_t *scanner)
     * }
     */
    public static MemorySegment zbar_image_scanner_get_results$address() {
        return zbar_image_scanner_get_results.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const zbar_symbol_set_t *zbar_image_scanner_get_results(const zbar_image_scanner_t *scanner)
     * }
     */
    public static MemorySegment zbar_image_scanner_get_results(MemorySegment scanner) {
        var mh$ = zbar_image_scanner_get_results.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_image_scanner_get_results", scanner);
            }
            return (MemorySegment)mh$.invokeExact(scanner);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_scan_image {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_INT,
            zbar.C_POINTER,
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_scan_image");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int zbar_scan_image(zbar_image_scanner_t *scanner, zbar_image_t *image)
     * }
     */
    public static FunctionDescriptor zbar_scan_image$descriptor() {
        return zbar_scan_image.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int zbar_scan_image(zbar_image_scanner_t *scanner, zbar_image_t *image)
     * }
     */
    public static MethodHandle zbar_scan_image$handle() {
        return zbar_scan_image.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int zbar_scan_image(zbar_image_scanner_t *scanner, zbar_image_t *image)
     * }
     */
    public static MemorySegment zbar_scan_image$address() {
        return zbar_scan_image.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int zbar_scan_image(zbar_image_scanner_t *scanner, zbar_image_t *image)
     * }
     */
    public static int zbar_scan_image(MemorySegment scanner, MemorySegment image) {
        var mh$ = zbar_scan_image.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_scan_image", scanner, image);
            }
            return (int)mh$.invokeExact(scanner, image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_decoder_create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_POINTER    );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_decoder_create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern zbar_decoder_t *zbar_decoder_create()
     * }
     */
    public static FunctionDescriptor zbar_decoder_create$descriptor() {
        return zbar_decoder_create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern zbar_decoder_t *zbar_decoder_create()
     * }
     */
    public static MethodHandle zbar_decoder_create$handle() {
        return zbar_decoder_create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern zbar_decoder_t *zbar_decoder_create()
     * }
     */
    public static MemorySegment zbar_decoder_create$address() {
        return zbar_decoder_create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern zbar_decoder_t *zbar_decoder_create()
     * }
     */
    public static MemorySegment zbar_decoder_create() {
        var mh$ = zbar_decoder_create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_decoder_create");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_decoder_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_decoder_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void zbar_decoder_destroy(zbar_decoder_t *decoder)
     * }
     */
    public static FunctionDescriptor zbar_decoder_destroy$descriptor() {
        return zbar_decoder_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void zbar_decoder_destroy(zbar_decoder_t *decoder)
     * }
     */
    public static MethodHandle zbar_decoder_destroy$handle() {
        return zbar_decoder_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void zbar_decoder_destroy(zbar_decoder_t *decoder)
     * }
     */
    public static MemorySegment zbar_decoder_destroy$address() {
        return zbar_decoder_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void zbar_decoder_destroy(zbar_decoder_t *decoder)
     * }
     */
    public static void zbar_decoder_destroy(MemorySegment decoder) {
        var mh$ = zbar_decoder_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_decoder_destroy", decoder);
            }
            mh$.invokeExact(decoder);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_decoder_set_config {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_INT,
            zbar.C_POINTER,
            zbar.C_INT,
            zbar.C_INT,
            zbar.C_INT
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_decoder_set_config");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int zbar_decoder_set_config(zbar_decoder_t *decoder, zbar_symbol_type_t symbology, zbar_config_t config, int value)
     * }
     */
    public static FunctionDescriptor zbar_decoder_set_config$descriptor() {
        return zbar_decoder_set_config.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int zbar_decoder_set_config(zbar_decoder_t *decoder, zbar_symbol_type_t symbology, zbar_config_t config, int value)
     * }
     */
    public static MethodHandle zbar_decoder_set_config$handle() {
        return zbar_decoder_set_config.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int zbar_decoder_set_config(zbar_decoder_t *decoder, zbar_symbol_type_t symbology, zbar_config_t config, int value)
     * }
     */
    public static MemorySegment zbar_decoder_set_config$address() {
        return zbar_decoder_set_config.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int zbar_decoder_set_config(zbar_decoder_t *decoder, zbar_symbol_type_t symbology, zbar_config_t config, int value)
     * }
     */
    public static int zbar_decoder_set_config(MemorySegment decoder, int symbology, int config, int value) {
        var mh$ = zbar_decoder_set_config.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_decoder_set_config", decoder, symbology, config, value);
            }
            return (int)mh$.invokeExact(decoder, symbology, config, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_decoder_get_config {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_INT,
            zbar.C_POINTER,
            zbar.C_INT,
            zbar.C_INT,
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_decoder_get_config");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int zbar_decoder_get_config(zbar_decoder_t *decoder, zbar_symbol_type_t symbology, zbar_config_t config, int *value)
     * }
     */
    public static FunctionDescriptor zbar_decoder_get_config$descriptor() {
        return zbar_decoder_get_config.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int zbar_decoder_get_config(zbar_decoder_t *decoder, zbar_symbol_type_t symbology, zbar_config_t config, int *value)
     * }
     */
    public static MethodHandle zbar_decoder_get_config$handle() {
        return zbar_decoder_get_config.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int zbar_decoder_get_config(zbar_decoder_t *decoder, zbar_symbol_type_t symbology, zbar_config_t config, int *value)
     * }
     */
    public static MemorySegment zbar_decoder_get_config$address() {
        return zbar_decoder_get_config.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int zbar_decoder_get_config(zbar_decoder_t *decoder, zbar_symbol_type_t symbology, zbar_config_t config, int *value)
     * }
     */
    public static int zbar_decoder_get_config(MemorySegment decoder, int symbology, int config, MemorySegment value) {
        var mh$ = zbar_decoder_get_config.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_decoder_get_config", decoder, symbology, config, value);
            }
            return (int)mh$.invokeExact(decoder, symbology, config, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_decoder_get_configs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_INT,
            zbar.C_POINTER,
            zbar.C_INT
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_decoder_get_configs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int zbar_decoder_get_configs(const zbar_decoder_t *decoder, zbar_symbol_type_t symbology)
     * }
     */
    public static FunctionDescriptor zbar_decoder_get_configs$descriptor() {
        return zbar_decoder_get_configs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int zbar_decoder_get_configs(const zbar_decoder_t *decoder, zbar_symbol_type_t symbology)
     * }
     */
    public static MethodHandle zbar_decoder_get_configs$handle() {
        return zbar_decoder_get_configs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int zbar_decoder_get_configs(const zbar_decoder_t *decoder, zbar_symbol_type_t symbology)
     * }
     */
    public static MemorySegment zbar_decoder_get_configs$address() {
        return zbar_decoder_get_configs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int zbar_decoder_get_configs(const zbar_decoder_t *decoder, zbar_symbol_type_t symbology)
     * }
     */
    public static int zbar_decoder_get_configs(MemorySegment decoder, int symbology) {
        var mh$ = zbar_decoder_get_configs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_decoder_get_configs", decoder, symbology);
            }
            return (int)mh$.invokeExact(decoder, symbology);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_decoder_reset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_decoder_reset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void zbar_decoder_reset(zbar_decoder_t *decoder)
     * }
     */
    public static FunctionDescriptor zbar_decoder_reset$descriptor() {
        return zbar_decoder_reset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void zbar_decoder_reset(zbar_decoder_t *decoder)
     * }
     */
    public static MethodHandle zbar_decoder_reset$handle() {
        return zbar_decoder_reset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void zbar_decoder_reset(zbar_decoder_t *decoder)
     * }
     */
    public static MemorySegment zbar_decoder_reset$address() {
        return zbar_decoder_reset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void zbar_decoder_reset(zbar_decoder_t *decoder)
     * }
     */
    public static void zbar_decoder_reset(MemorySegment decoder) {
        var mh$ = zbar_decoder_reset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_decoder_reset", decoder);
            }
            mh$.invokeExact(decoder);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_decoder_new_scan {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_decoder_new_scan");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void zbar_decoder_new_scan(zbar_decoder_t *decoder)
     * }
     */
    public static FunctionDescriptor zbar_decoder_new_scan$descriptor() {
        return zbar_decoder_new_scan.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void zbar_decoder_new_scan(zbar_decoder_t *decoder)
     * }
     */
    public static MethodHandle zbar_decoder_new_scan$handle() {
        return zbar_decoder_new_scan.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void zbar_decoder_new_scan(zbar_decoder_t *decoder)
     * }
     */
    public static MemorySegment zbar_decoder_new_scan$address() {
        return zbar_decoder_new_scan.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void zbar_decoder_new_scan(zbar_decoder_t *decoder)
     * }
     */
    public static void zbar_decoder_new_scan(MemorySegment decoder) {
        var mh$ = zbar_decoder_new_scan.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_decoder_new_scan", decoder);
            }
            mh$.invokeExact(decoder);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_decode_width {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_INT,
            zbar.C_POINTER,
            zbar.C_INT
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_decode_width");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern zbar_symbol_type_t zbar_decode_width(zbar_decoder_t *decoder, unsigned int width)
     * }
     */
    public static FunctionDescriptor zbar_decode_width$descriptor() {
        return zbar_decode_width.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern zbar_symbol_type_t zbar_decode_width(zbar_decoder_t *decoder, unsigned int width)
     * }
     */
    public static MethodHandle zbar_decode_width$handle() {
        return zbar_decode_width.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern zbar_symbol_type_t zbar_decode_width(zbar_decoder_t *decoder, unsigned int width)
     * }
     */
    public static MemorySegment zbar_decode_width$address() {
        return zbar_decode_width.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern zbar_symbol_type_t zbar_decode_width(zbar_decoder_t *decoder, unsigned int width)
     * }
     */
    public static int zbar_decode_width(MemorySegment decoder, int width) {
        var mh$ = zbar_decode_width.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_decode_width", decoder, width);
            }
            return (int)mh$.invokeExact(decoder, width);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_decoder_get_color {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_INT,
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_decoder_get_color");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern zbar_color_t zbar_decoder_get_color(const zbar_decoder_t *decoder)
     * }
     */
    public static FunctionDescriptor zbar_decoder_get_color$descriptor() {
        return zbar_decoder_get_color.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern zbar_color_t zbar_decoder_get_color(const zbar_decoder_t *decoder)
     * }
     */
    public static MethodHandle zbar_decoder_get_color$handle() {
        return zbar_decoder_get_color.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern zbar_color_t zbar_decoder_get_color(const zbar_decoder_t *decoder)
     * }
     */
    public static MemorySegment zbar_decoder_get_color$address() {
        return zbar_decoder_get_color.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern zbar_color_t zbar_decoder_get_color(const zbar_decoder_t *decoder)
     * }
     */
    public static int zbar_decoder_get_color(MemorySegment decoder) {
        var mh$ = zbar_decoder_get_color.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_decoder_get_color", decoder);
            }
            return (int)mh$.invokeExact(decoder);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_decoder_get_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_POINTER,
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_decoder_get_data");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *zbar_decoder_get_data(const zbar_decoder_t *decoder)
     * }
     */
    public static FunctionDescriptor zbar_decoder_get_data$descriptor() {
        return zbar_decoder_get_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *zbar_decoder_get_data(const zbar_decoder_t *decoder)
     * }
     */
    public static MethodHandle zbar_decoder_get_data$handle() {
        return zbar_decoder_get_data.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *zbar_decoder_get_data(const zbar_decoder_t *decoder)
     * }
     */
    public static MemorySegment zbar_decoder_get_data$address() {
        return zbar_decoder_get_data.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *zbar_decoder_get_data(const zbar_decoder_t *decoder)
     * }
     */
    public static MemorySegment zbar_decoder_get_data(MemorySegment decoder) {
        var mh$ = zbar_decoder_get_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_decoder_get_data", decoder);
            }
            return (MemorySegment)mh$.invokeExact(decoder);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_decoder_get_data_length {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_INT,
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_decoder_get_data_length");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int zbar_decoder_get_data_length(const zbar_decoder_t *decoder)
     * }
     */
    public static FunctionDescriptor zbar_decoder_get_data_length$descriptor() {
        return zbar_decoder_get_data_length.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int zbar_decoder_get_data_length(const zbar_decoder_t *decoder)
     * }
     */
    public static MethodHandle zbar_decoder_get_data_length$handle() {
        return zbar_decoder_get_data_length.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int zbar_decoder_get_data_length(const zbar_decoder_t *decoder)
     * }
     */
    public static MemorySegment zbar_decoder_get_data_length$address() {
        return zbar_decoder_get_data_length.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int zbar_decoder_get_data_length(const zbar_decoder_t *decoder)
     * }
     */
    public static int zbar_decoder_get_data_length(MemorySegment decoder) {
        var mh$ = zbar_decoder_get_data_length.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_decoder_get_data_length", decoder);
            }
            return (int)mh$.invokeExact(decoder);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_decoder_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_INT,
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_decoder_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern zbar_symbol_type_t zbar_decoder_get_type(const zbar_decoder_t *decoder)
     * }
     */
    public static FunctionDescriptor zbar_decoder_get_type$descriptor() {
        return zbar_decoder_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern zbar_symbol_type_t zbar_decoder_get_type(const zbar_decoder_t *decoder)
     * }
     */
    public static MethodHandle zbar_decoder_get_type$handle() {
        return zbar_decoder_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern zbar_symbol_type_t zbar_decoder_get_type(const zbar_decoder_t *decoder)
     * }
     */
    public static MemorySegment zbar_decoder_get_type$address() {
        return zbar_decoder_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern zbar_symbol_type_t zbar_decoder_get_type(const zbar_decoder_t *decoder)
     * }
     */
    public static int zbar_decoder_get_type(MemorySegment decoder) {
        var mh$ = zbar_decoder_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_decoder_get_type", decoder);
            }
            return (int)mh$.invokeExact(decoder);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_decoder_get_modifiers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_INT,
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_decoder_get_modifiers");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int zbar_decoder_get_modifiers(const zbar_decoder_t *decoder)
     * }
     */
    public static FunctionDescriptor zbar_decoder_get_modifiers$descriptor() {
        return zbar_decoder_get_modifiers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int zbar_decoder_get_modifiers(const zbar_decoder_t *decoder)
     * }
     */
    public static MethodHandle zbar_decoder_get_modifiers$handle() {
        return zbar_decoder_get_modifiers.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int zbar_decoder_get_modifiers(const zbar_decoder_t *decoder)
     * }
     */
    public static MemorySegment zbar_decoder_get_modifiers$address() {
        return zbar_decoder_get_modifiers.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int zbar_decoder_get_modifiers(const zbar_decoder_t *decoder)
     * }
     */
    public static int zbar_decoder_get_modifiers(MemorySegment decoder) {
        var mh$ = zbar_decoder_get_modifiers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_decoder_get_modifiers", decoder);
            }
            return (int)mh$.invokeExact(decoder);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_decoder_get_direction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_INT,
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_decoder_get_direction");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int zbar_decoder_get_direction(const zbar_decoder_t *decoder)
     * }
     */
    public static FunctionDescriptor zbar_decoder_get_direction$descriptor() {
        return zbar_decoder_get_direction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int zbar_decoder_get_direction(const zbar_decoder_t *decoder)
     * }
     */
    public static MethodHandle zbar_decoder_get_direction$handle() {
        return zbar_decoder_get_direction.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int zbar_decoder_get_direction(const zbar_decoder_t *decoder)
     * }
     */
    public static MemorySegment zbar_decoder_get_direction$address() {
        return zbar_decoder_get_direction.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int zbar_decoder_get_direction(const zbar_decoder_t *decoder)
     * }
     */
    public static int zbar_decoder_get_direction(MemorySegment decoder) {
        var mh$ = zbar_decoder_get_direction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_decoder_get_direction", decoder);
            }
            return (int)mh$.invokeExact(decoder);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_decoder_set_handler {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_POINTER,
            zbar.C_POINTER,
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_decoder_set_handler");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern zbar_decoder_handler_t *zbar_decoder_set_handler(zbar_decoder_t *decoder, zbar_decoder_handler_t *handler)
     * }
     */
    public static FunctionDescriptor zbar_decoder_set_handler$descriptor() {
        return zbar_decoder_set_handler.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern zbar_decoder_handler_t *zbar_decoder_set_handler(zbar_decoder_t *decoder, zbar_decoder_handler_t *handler)
     * }
     */
    public static MethodHandle zbar_decoder_set_handler$handle() {
        return zbar_decoder_set_handler.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern zbar_decoder_handler_t *zbar_decoder_set_handler(zbar_decoder_t *decoder, zbar_decoder_handler_t *handler)
     * }
     */
    public static MemorySegment zbar_decoder_set_handler$address() {
        return zbar_decoder_set_handler.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern zbar_decoder_handler_t *zbar_decoder_set_handler(zbar_decoder_t *decoder, zbar_decoder_handler_t *handler)
     * }
     */
    public static MemorySegment zbar_decoder_set_handler(MemorySegment decoder, MemorySegment handler) {
        var mh$ = zbar_decoder_set_handler.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_decoder_set_handler", decoder, handler);
            }
            return (MemorySegment)mh$.invokeExact(decoder, handler);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_decoder_set_userdata {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            zbar.C_POINTER,
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_decoder_set_userdata");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void zbar_decoder_set_userdata(zbar_decoder_t *decoder, void *userdata)
     * }
     */
    public static FunctionDescriptor zbar_decoder_set_userdata$descriptor() {
        return zbar_decoder_set_userdata.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void zbar_decoder_set_userdata(zbar_decoder_t *decoder, void *userdata)
     * }
     */
    public static MethodHandle zbar_decoder_set_userdata$handle() {
        return zbar_decoder_set_userdata.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void zbar_decoder_set_userdata(zbar_decoder_t *decoder, void *userdata)
     * }
     */
    public static MemorySegment zbar_decoder_set_userdata$address() {
        return zbar_decoder_set_userdata.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void zbar_decoder_set_userdata(zbar_decoder_t *decoder, void *userdata)
     * }
     */
    public static void zbar_decoder_set_userdata(MemorySegment decoder, MemorySegment userdata) {
        var mh$ = zbar_decoder_set_userdata.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_decoder_set_userdata", decoder, userdata);
            }
            mh$.invokeExact(decoder, userdata);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_decoder_get_userdata {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_POINTER,
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_decoder_get_userdata");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *zbar_decoder_get_userdata(const zbar_decoder_t *decoder)
     * }
     */
    public static FunctionDescriptor zbar_decoder_get_userdata$descriptor() {
        return zbar_decoder_get_userdata.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *zbar_decoder_get_userdata(const zbar_decoder_t *decoder)
     * }
     */
    public static MethodHandle zbar_decoder_get_userdata$handle() {
        return zbar_decoder_get_userdata.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void *zbar_decoder_get_userdata(const zbar_decoder_t *decoder)
     * }
     */
    public static MemorySegment zbar_decoder_get_userdata$address() {
        return zbar_decoder_get_userdata.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void *zbar_decoder_get_userdata(const zbar_decoder_t *decoder)
     * }
     */
    public static MemorySegment zbar_decoder_get_userdata(MemorySegment decoder) {
        var mh$ = zbar_decoder_get_userdata.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_decoder_get_userdata", decoder);
            }
            return (MemorySegment)mh$.invokeExact(decoder);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_scanner_create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_POINTER,
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_scanner_create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern zbar_scanner_t *zbar_scanner_create(zbar_decoder_t *decoder)
     * }
     */
    public static FunctionDescriptor zbar_scanner_create$descriptor() {
        return zbar_scanner_create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern zbar_scanner_t *zbar_scanner_create(zbar_decoder_t *decoder)
     * }
     */
    public static MethodHandle zbar_scanner_create$handle() {
        return zbar_scanner_create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern zbar_scanner_t *zbar_scanner_create(zbar_decoder_t *decoder)
     * }
     */
    public static MemorySegment zbar_scanner_create$address() {
        return zbar_scanner_create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern zbar_scanner_t *zbar_scanner_create(zbar_decoder_t *decoder)
     * }
     */
    public static MemorySegment zbar_scanner_create(MemorySegment decoder) {
        var mh$ = zbar_scanner_create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_scanner_create", decoder);
            }
            return (MemorySegment)mh$.invokeExact(decoder);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_scanner_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_scanner_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void zbar_scanner_destroy(zbar_scanner_t *scanner)
     * }
     */
    public static FunctionDescriptor zbar_scanner_destroy$descriptor() {
        return zbar_scanner_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void zbar_scanner_destroy(zbar_scanner_t *scanner)
     * }
     */
    public static MethodHandle zbar_scanner_destroy$handle() {
        return zbar_scanner_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void zbar_scanner_destroy(zbar_scanner_t *scanner)
     * }
     */
    public static MemorySegment zbar_scanner_destroy$address() {
        return zbar_scanner_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void zbar_scanner_destroy(zbar_scanner_t *scanner)
     * }
     */
    public static void zbar_scanner_destroy(MemorySegment scanner) {
        var mh$ = zbar_scanner_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_scanner_destroy", scanner);
            }
            mh$.invokeExact(scanner);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_scanner_reset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_INT,
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_scanner_reset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern zbar_symbol_type_t zbar_scanner_reset(zbar_scanner_t *scanner)
     * }
     */
    public static FunctionDescriptor zbar_scanner_reset$descriptor() {
        return zbar_scanner_reset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern zbar_symbol_type_t zbar_scanner_reset(zbar_scanner_t *scanner)
     * }
     */
    public static MethodHandle zbar_scanner_reset$handle() {
        return zbar_scanner_reset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern zbar_symbol_type_t zbar_scanner_reset(zbar_scanner_t *scanner)
     * }
     */
    public static MemorySegment zbar_scanner_reset$address() {
        return zbar_scanner_reset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern zbar_symbol_type_t zbar_scanner_reset(zbar_scanner_t *scanner)
     * }
     */
    public static int zbar_scanner_reset(MemorySegment scanner) {
        var mh$ = zbar_scanner_reset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_scanner_reset", scanner);
            }
            return (int)mh$.invokeExact(scanner);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_scanner_new_scan {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_INT,
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_scanner_new_scan");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern zbar_symbol_type_t zbar_scanner_new_scan(zbar_scanner_t *scanner)
     * }
     */
    public static FunctionDescriptor zbar_scanner_new_scan$descriptor() {
        return zbar_scanner_new_scan.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern zbar_symbol_type_t zbar_scanner_new_scan(zbar_scanner_t *scanner)
     * }
     */
    public static MethodHandle zbar_scanner_new_scan$handle() {
        return zbar_scanner_new_scan.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern zbar_symbol_type_t zbar_scanner_new_scan(zbar_scanner_t *scanner)
     * }
     */
    public static MemorySegment zbar_scanner_new_scan$address() {
        return zbar_scanner_new_scan.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern zbar_symbol_type_t zbar_scanner_new_scan(zbar_scanner_t *scanner)
     * }
     */
    public static int zbar_scanner_new_scan(MemorySegment scanner) {
        var mh$ = zbar_scanner_new_scan.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_scanner_new_scan", scanner);
            }
            return (int)mh$.invokeExact(scanner);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_scanner_flush {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_INT,
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_scanner_flush");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern zbar_symbol_type_t zbar_scanner_flush(zbar_scanner_t *scanner)
     * }
     */
    public static FunctionDescriptor zbar_scanner_flush$descriptor() {
        return zbar_scanner_flush.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern zbar_symbol_type_t zbar_scanner_flush(zbar_scanner_t *scanner)
     * }
     */
    public static MethodHandle zbar_scanner_flush$handle() {
        return zbar_scanner_flush.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern zbar_symbol_type_t zbar_scanner_flush(zbar_scanner_t *scanner)
     * }
     */
    public static MemorySegment zbar_scanner_flush$address() {
        return zbar_scanner_flush.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern zbar_symbol_type_t zbar_scanner_flush(zbar_scanner_t *scanner)
     * }
     */
    public static int zbar_scanner_flush(MemorySegment scanner) {
        var mh$ = zbar_scanner_flush.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_scanner_flush", scanner);
            }
            return (int)mh$.invokeExact(scanner);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_scan_y {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_INT,
            zbar.C_POINTER,
            zbar.C_INT
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_scan_y");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern zbar_symbol_type_t zbar_scan_y(zbar_scanner_t *scanner, int y)
     * }
     */
    public static FunctionDescriptor zbar_scan_y$descriptor() {
        return zbar_scan_y.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern zbar_symbol_type_t zbar_scan_y(zbar_scanner_t *scanner, int y)
     * }
     */
    public static MethodHandle zbar_scan_y$handle() {
        return zbar_scan_y.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern zbar_symbol_type_t zbar_scan_y(zbar_scanner_t *scanner, int y)
     * }
     */
    public static MemorySegment zbar_scan_y$address() {
        return zbar_scan_y.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern zbar_symbol_type_t zbar_scan_y(zbar_scanner_t *scanner, int y)
     * }
     */
    public static int zbar_scan_y(MemorySegment scanner, int y) {
        var mh$ = zbar_scan_y.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_scan_y", scanner, y);
            }
            return (int)mh$.invokeExact(scanner, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_scanner_get_width {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_INT,
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_scanner_get_width");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int zbar_scanner_get_width(const zbar_scanner_t *scanner)
     * }
     */
    public static FunctionDescriptor zbar_scanner_get_width$descriptor() {
        return zbar_scanner_get_width.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int zbar_scanner_get_width(const zbar_scanner_t *scanner)
     * }
     */
    public static MethodHandle zbar_scanner_get_width$handle() {
        return zbar_scanner_get_width.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int zbar_scanner_get_width(const zbar_scanner_t *scanner)
     * }
     */
    public static MemorySegment zbar_scanner_get_width$address() {
        return zbar_scanner_get_width.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int zbar_scanner_get_width(const zbar_scanner_t *scanner)
     * }
     */
    public static int zbar_scanner_get_width(MemorySegment scanner) {
        var mh$ = zbar_scanner_get_width.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_scanner_get_width", scanner);
            }
            return (int)mh$.invokeExact(scanner);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_scanner_get_edge {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_INT,
            zbar.C_POINTER,
            zbar.C_INT,
            zbar.C_INT
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_scanner_get_edge");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int zbar_scanner_get_edge(const zbar_scanner_t *scn, unsigned int offset, int prec)
     * }
     */
    public static FunctionDescriptor zbar_scanner_get_edge$descriptor() {
        return zbar_scanner_get_edge.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int zbar_scanner_get_edge(const zbar_scanner_t *scn, unsigned int offset, int prec)
     * }
     */
    public static MethodHandle zbar_scanner_get_edge$handle() {
        return zbar_scanner_get_edge.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int zbar_scanner_get_edge(const zbar_scanner_t *scn, unsigned int offset, int prec)
     * }
     */
    public static MemorySegment zbar_scanner_get_edge$address() {
        return zbar_scanner_get_edge.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int zbar_scanner_get_edge(const zbar_scanner_t *scn, unsigned int offset, int prec)
     * }
     */
    public static int zbar_scanner_get_edge(MemorySegment scn, int offset, int prec) {
        var mh$ = zbar_scanner_get_edge.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_scanner_get_edge", scn, offset, prec);
            }
            return (int)mh$.invokeExact(scn, offset, prec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class zbar_scanner_get_color {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            zbar.C_INT,
            zbar.C_POINTER
        );

        public static final MemorySegment ADDR = zbar.findOrThrow("zbar_scanner_get_color");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern zbar_color_t zbar_scanner_get_color(const zbar_scanner_t *scanner)
     * }
     */
    public static FunctionDescriptor zbar_scanner_get_color$descriptor() {
        return zbar_scanner_get_color.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern zbar_color_t zbar_scanner_get_color(const zbar_scanner_t *scanner)
     * }
     */
    public static MethodHandle zbar_scanner_get_color$handle() {
        return zbar_scanner_get_color.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern zbar_color_t zbar_scanner_get_color(const zbar_scanner_t *scanner)
     * }
     */
    public static MemorySegment zbar_scanner_get_color$address() {
        return zbar_scanner_get_color.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern zbar_color_t zbar_scanner_get_color(const zbar_scanner_t *scanner)
     * }
     */
    public static int zbar_scanner_get_color(MemorySegment scanner) {
        var mh$ = zbar_scanner_get_color.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("zbar_scanner_get_color", scanner);
            }
            return (int)mh$.invokeExact(scanner);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final long _POSIX_C_SOURCE = 200809L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_C_SOURCE 200809
     * }
     */
    public static long _POSIX_C_SOURCE() {
        return _POSIX_C_SOURCE;
    }
    private static final int __TIMESIZE = (int)64L;
    /**
     * {@snippet lang=c :
     * #define __TIMESIZE 64
     * }
     */
    public static int __TIMESIZE() {
        return __TIMESIZE;
    }
    private static final long __STDC_IEC_60559_BFP__ = 201404L;
    /**
     * {@snippet lang=c :
     * #define __STDC_IEC_60559_BFP__ 201404
     * }
     */
    public static long __STDC_IEC_60559_BFP__() {
        return __STDC_IEC_60559_BFP__;
    }
    private static final long __STDC_IEC_60559_COMPLEX__ = 201404L;
    /**
     * {@snippet lang=c :
     * #define __STDC_IEC_60559_COMPLEX__ 201404
     * }
     */
    public static long __STDC_IEC_60559_COMPLEX__() {
        return __STDC_IEC_60559_COMPLEX__;
    }
    private static final long __STDC_ISO_10646__ = 201706L;
    /**
     * {@snippet lang=c :
     * #define __STDC_ISO_10646__ 201706
     * }
     */
    public static long __STDC_ISO_10646__() {
        return __STDC_ISO_10646__;
    }
    private static final int __WCHAR_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define __WCHAR_MAX 2147483647
     * }
     */
    public static int __WCHAR_MAX() {
        return __WCHAR_MAX;
    }
    private static final int __WCHAR_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define __WCHAR_MIN -2147483648
     * }
     */
    public static int __WCHAR_MIN() {
        return __WCHAR_MIN;
    }
    private static final int INT8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT8_MIN -128
     * }
     */
    public static int INT8_MIN() {
        return INT8_MIN;
    }
    private static final int INT16_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define INT16_MIN -32768
     * }
     */
    public static int INT16_MIN() {
        return INT16_MIN;
    }
    private static final int INT32_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT32_MIN -2147483648
     * }
     */
    public static int INT32_MIN() {
        return INT32_MIN;
    }
    private static final long INT64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT64_MIN -9223372036854775808
     * }
     */
    public static long INT64_MIN() {
        return INT64_MIN;
    }
    private static final int INT8_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define INT8_MAX 127
     * }
     */
    public static int INT8_MAX() {
        return INT8_MAX;
    }
    private static final int INT16_MAX = (int)32767L;
    /**
     * {@snippet lang=c :
     * #define INT16_MAX 32767
     * }
     */
    public static int INT16_MAX() {
        return INT16_MAX;
    }
    private static final int INT32_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define INT32_MAX 2147483647
     * }
     */
    public static int INT32_MAX() {
        return INT32_MAX;
    }
    private static final long INT64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT64_MAX 9223372036854775807
     * }
     */
    public static long INT64_MAX() {
        return INT64_MAX;
    }
    private static final int UINT8_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define UINT8_MAX 255
     * }
     */
    public static int UINT8_MAX() {
        return UINT8_MAX;
    }
    private static final int UINT16_MAX = (int)65535L;
    /**
     * {@snippet lang=c :
     * #define UINT16_MAX 65535
     * }
     */
    public static int UINT16_MAX() {
        return UINT16_MAX;
    }
    private static final int UINT32_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT32_MAX 4294967295
     * }
     */
    public static int UINT32_MAX() {
        return UINT32_MAX;
    }
    private static final long UINT64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT64_MAX -1
     * }
     */
    public static long UINT64_MAX() {
        return UINT64_MAX;
    }
    private static final int INT_LEAST8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST8_MIN -128
     * }
     */
    public static int INT_LEAST8_MIN() {
        return INT_LEAST8_MIN;
    }
    private static final int INT_LEAST16_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST16_MIN -32768
     * }
     */
    public static int INT_LEAST16_MIN() {
        return INT_LEAST16_MIN;
    }
    private static final int INT_LEAST32_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST32_MIN -2147483648
     * }
     */
    public static int INT_LEAST32_MIN() {
        return INT_LEAST32_MIN;
    }
    private static final long INT_LEAST64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_LEAST64_MIN() {
        return INT_LEAST64_MIN;
    }
    private static final int INT_LEAST8_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST8_MAX 127
     * }
     */
    public static int INT_LEAST8_MAX() {
        return INT_LEAST8_MAX;
    }
    private static final int INT_LEAST16_MAX = (int)32767L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST16_MAX 32767
     * }
     */
    public static int INT_LEAST16_MAX() {
        return INT_LEAST16_MAX;
    }
    private static final int INT_LEAST32_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST32_MAX 2147483647
     * }
     */
    public static int INT_LEAST32_MAX() {
        return INT_LEAST32_MAX;
    }
    private static final long INT_LEAST64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_LEAST64_MAX() {
        return INT_LEAST64_MAX;
    }
    private static final int UINT_LEAST8_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST8_MAX 255
     * }
     */
    public static int UINT_LEAST8_MAX() {
        return UINT_LEAST8_MAX;
    }
    private static final int UINT_LEAST16_MAX = (int)65535L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST16_MAX 65535
     * }
     */
    public static int UINT_LEAST16_MAX() {
        return UINT_LEAST16_MAX;
    }
    private static final int UINT_LEAST32_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST32_MAX 4294967295
     * }
     */
    public static int UINT_LEAST32_MAX() {
        return UINT_LEAST32_MAX;
    }
    private static final long UINT_LEAST64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST64_MAX -1
     * }
     */
    public static long UINT_LEAST64_MAX() {
        return UINT_LEAST64_MAX;
    }
    private static final int INT_FAST8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST8_MIN -128
     * }
     */
    public static int INT_FAST8_MIN() {
        return INT_FAST8_MIN;
    }
    private static final long INT_FAST16_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST16_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST16_MIN() {
        return INT_FAST16_MIN;
    }
    private static final long INT_FAST32_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST32_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST32_MIN() {
        return INT_FAST32_MIN;
    }
    private static final long INT_FAST64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST64_MIN() {
        return INT_FAST64_MIN;
    }
    private static final int INT_FAST8_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST8_MAX 127
     * }
     */
    public static int INT_FAST8_MAX() {
        return INT_FAST8_MAX;
    }
    private static final long INT_FAST16_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST16_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST16_MAX() {
        return INT_FAST16_MAX;
    }
    private static final long INT_FAST32_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST32_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST32_MAX() {
        return INT_FAST32_MAX;
    }
    private static final long INT_FAST64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST64_MAX() {
        return INT_FAST64_MAX;
    }
    private static final int UINT_FAST8_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST8_MAX 255
     * }
     */
    public static int UINT_FAST8_MAX() {
        return UINT_FAST8_MAX;
    }
    private static final long UINT_FAST16_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST16_MAX -1
     * }
     */
    public static long UINT_FAST16_MAX() {
        return UINT_FAST16_MAX;
    }
    private static final long UINT_FAST32_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST32_MAX -1
     * }
     */
    public static long UINT_FAST32_MAX() {
        return UINT_FAST32_MAX;
    }
    private static final long UINT_FAST64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST64_MAX -1
     * }
     */
    public static long UINT_FAST64_MAX() {
        return UINT_FAST64_MAX;
    }
    private static final long INTPTR_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INTPTR_MIN -9223372036854775808
     * }
     */
    public static long INTPTR_MIN() {
        return INTPTR_MIN;
    }
    private static final long INTPTR_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INTPTR_MAX 9223372036854775807
     * }
     */
    public static long INTPTR_MAX() {
        return INTPTR_MAX;
    }
    private static final long UINTPTR_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINTPTR_MAX -1
     * }
     */
    public static long UINTPTR_MAX() {
        return UINTPTR_MAX;
    }
    private static final long INTMAX_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INTMAX_MIN -9223372036854775808
     * }
     */
    public static long INTMAX_MIN() {
        return INTMAX_MIN;
    }
    private static final long INTMAX_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INTMAX_MAX 9223372036854775807
     * }
     */
    public static long INTMAX_MAX() {
        return INTMAX_MAX;
    }
    private static final long UINTMAX_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINTMAX_MAX -1
     * }
     */
    public static long UINTMAX_MAX() {
        return UINTMAX_MAX;
    }
    private static final long PTRDIFF_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define PTRDIFF_MIN -9223372036854775808
     * }
     */
    public static long PTRDIFF_MIN() {
        return PTRDIFF_MIN;
    }
    private static final long PTRDIFF_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define PTRDIFF_MAX 9223372036854775807
     * }
     */
    public static long PTRDIFF_MAX() {
        return PTRDIFF_MAX;
    }
    private static final int SIG_ATOMIC_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define SIG_ATOMIC_MIN -2147483648
     * }
     */
    public static int SIG_ATOMIC_MIN() {
        return SIG_ATOMIC_MIN;
    }
    private static final int SIG_ATOMIC_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define SIG_ATOMIC_MAX 2147483647
     * }
     */
    public static int SIG_ATOMIC_MAX() {
        return SIG_ATOMIC_MAX;
    }
    private static final long SIZE_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define SIZE_MAX -1
     * }
     */
    public static long SIZE_MAX() {
        return SIZE_MAX;
    }
    private static final int WCHAR_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define WCHAR_MIN -2147483648
     * }
     */
    public static int WCHAR_MIN() {
        return WCHAR_MIN;
    }
    private static final int WCHAR_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define WCHAR_MAX 2147483647
     * }
     */
    public static int WCHAR_MAX() {
        return WCHAR_MAX;
    }
    private static final int WINT_MIN = (int)0L;
    /**
     * {@snippet lang=c :
     * #define WINT_MIN 0
     * }
     */
    public static int WINT_MIN() {
        return WINT_MIN;
    }
    private static final int WINT_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define WINT_MAX 4294967295
     * }
     */
    public static int WINT_MAX() {
        return WINT_MAX;
    }
}

